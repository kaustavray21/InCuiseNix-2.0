start,text
0.0, Hello and welcome back.
2.0," In today's video, I'm going to show you how to serve and renderer static assets in Django."
7.0," In web development, static files like CSS, images and JavaScript are crucial for providing a consistent and visually appealing user experience."
16.0," These files enhance the appearance and interactivity of web pages, but they're not dynamically generated by the server, which makes them static."
25.0," And if we're talking about static assets, we have styles, we have images, and we have JavaScript files to be served and rendered in your Django project."
34.0, CSS of course defines the layout and styles of your pages content.
39.0," Also, JavaScript provides interactivity and dynamic behaviors like animations, event listeners, and so on."
45.0," And of course, we have images. Well, I'm sure that you know what images are."
51.0, So why serving static files matters?
54.0," In fact, serving and rendering static files in Django matters for different reasons."
59.0," The first reason is consistency. So you have styles and branding, which are maintained across all of your pages by loading styles sheets and images."
68.0, Also performance. Optimized static files reduce the need to fetch styles and scripts repeatedly.
74.0, And this in fact improves the load time and reduces the server load.
79.0, And the last reason is interactivity. So JavaScript files provide the opportunity to engage users and provide more dynamic content.
88.0, That's awesome. But what is Django's approach to static files?
93.0, Django's approach to static files actually includes static file storage.
97.0," And when I say static file storage, I mean the static files doors in your settings.py file."
104.0, This in fact allows you to specify where static files live in your project's file structure.
109.0, Also templates and URL tagging. And we have coded together the last video using the Django template language with those curly braces and ampersand.
119.0," Like this one here, for example, curly braces double ampersand load static."
124.0," And in this video, I'm going to show you where we can put the load static in our HTML file."
129.0," So this load static syntax, for example, is used to reference the files dynamically in HTML templates."
135.0, And this effectively ensures a robust and maintainable system.
138.0, This was a quick presentation. Now let's go ahead and create a simple Django web page that's going to utilize those static files effectively.
146.0," And we'll include images, styles and JavaScript code. So let's throw a post leaves and get started."
152.0," Alright, so inside my main folder here Django course and I have a sub directory called lesson8 static assets."
160.0, I want to make sure that I'm inside that folder static assets.
166.0," And of course, I want to activate the virtual environment. In order to do that, of course, I'm going to use the PPNV shell command."
175.0," Good, control L to clear the terminal. I want also to install Django using PPNV."
190.0, Awesome! So control L to clear the terminal. Now I want to create a project and I'm going to call my project Django underscore project.
200.0," Good, now let's see D to that Django underscore project."
206.0," And inside here, notice that I have another folder called Django project and manage the Py command line."
213.0," So I think you know by now how to create an application, you do Python manage the Py start app and the name of the application."
223.0," Now if we'll do LS, we have our project and we have our application and of course manage the Py command line."
230.0," Now let me show you what we can do. Inside Django's project, we have our application and the project."
236.0, What you want to do is you want to go to your application and I'm going to create a folder called static.
243.0, Let's go ahead and do that.
247.0," Inside static, you can create all of your assets folders. So you have CSS, in styles, you have JavaScript and you have images."
254.0," Let's go ahead and do that. Let's do, let's say for instance we have here styles."
260.0, Let's also create another folder for images and let's create another one for JavaScript.
268.0," Well, you can leave it as JS. Django is going to understand that this is the folder where you want to put your JavaScript files."
275.0," Similarly for styles and images. Also from within your Django app, I want to create a folder templates."
282.0," This is we have seen the last video and inside templates, I'm going to create a different folder and I'm going to call it Django underscore app."
292.0," And inside that, I want to create my index dot HTML."
296.0, Now let's go ahead and do very important configuration steps in settings.py.
302.0, This is very important indeed for Django to be able to understand where your static assets live.
308.0," So the first configuration step we need to do in any other application, we need to enter the name of your application inside installed apps list."
316.0, So our application is called Django underscore app.
321.0," Okay, next thing you need to do is to go to the bottom of the file."
326.0," Take a look here, static files, CSS, JavaScript and images."
330.0, We have static URL and that's equal to a string which is called static.
335.0, This static URL in fact is the base URL for serving all of your static files.
340.0," So for instance, all of your static files like CSS, JavaScript and images will be accessed using this base path."
348.0, And this is actually put here by default. I didn't put this manually.
352.0," So just to explain to you what static URL is, again, that's the base URL for serving all of your static files."
360.0, Also there is a base URL for serving media files which are user-applauded content.
367.0," And by convention, it's put in a folder called images."
370.0," These files inside images can be anything uploaded by users, such as profile pictures, document uploads for example."
378.0, So you can put all of that in images folder.
380.0," The most important thing here is the static files, DURS."
384.0, This folder right here is a tuple that's containing all of the path to directories within the project.
390.0, So that's going to be a tuple. Let me just maximize a little bit.
395.0," And inside here, I will need to import the operating system module."
400.0, So os.path.join and we're going to join the base DURR.
406.0, And the second parameter is static.
409.0, So this setting right here defines additional directories where Django is going to look for static files.
415.0, And this specific static files DURRs is a tuple that's containing all of the path to all of the other directories within your project.
424.0, And here we're using the os.path.join to combine the base DURR with the static folder name.
431.0, And this effectively is going to allow you to keep your static files organized inside the static folder.
437.0, So you need to make sure to not change the static folder's name in the process.
442.0, And you might wonder why there is squiggly line under the os.
446.0," Well, because Django is complaining as we need to import the operating system module."
451.0, It's not important by default. So we will need to import the operating system module here.
457.0," Also, there is another thing that I would like to show you."
460.0," You might be wondering in static files DURRs, how Django understands the path to join for the base DURR and the static."
467.0," Well, the static we know that we have here our static URL. But what about the base DURR?"
473.0," If you will click on base DURR, you will find another variable here defined on the top of the settings.py file."
480.0, Let me explain to you in details. So the base DURR is the name of the variable.
484.0," Now, for the path, this actually is a class that's provided by path lib module in Python."
491.0, And that actually offers an object oriented approach to file system path.
496.0," Inside that class, we have an argument which is the underscore underscore file underscore underscore."
502.0, This is in fact a built-in variable that provides the path to our current script.
508.0," In our case, the file that's being executed, resolve is basically a method that it's working on the path class, which returns the absolute path of the file."
518.0, And that actually resolves symbolic links and relative references.
522.0," Like for instance, dot for current directory or dot dot for the parent directory."
527.0, And this is very clear by the following dot parent dot parent.
531.0," Alright, now you understand the base DURR, let me show you an awesome thing you can do in Python."
536.0," Go ahead and open your Python interpreter, import the operating system."
541.0," You can now create base DURR, which is going to be equal to the operating system dot a method called get current working directory."
551.0," If you will print that base DURR variable, you will get the full current working directory, which is essentially our base directory."
561.0, Now that's all what you need to do in settings.py in order to serve and render static assets to your web page.
568.0, Now let's jump to views.py and create our function.
572.0," So of course the function, I'm going to call it index for the main page."
576.0," And that's going to take the request, the HTTP request, and I'm going to return render."
583.0, And here I will pass the request as first argument.
586.0," The second argument of course is going to be the template's name, which is our index dot HTML file that actually lives in Django underscore app folder index dot HTML."
598.0," Alright, also let's go ahead and create your else dot by file."
602.0, So this your else dot by file is going to set up the URL for our web page from Django dot your else.
609.0, You want to import the path also from the current directory views.
613.0, I want to import index.
616.0, Next the URL patterns are equal to a list.
621.0, And the only path that we have is on just an empty route.
626.0, I want to go to invoke the index function.
630.0, And I'm going to give it a name of index.
633.0, And please do not forget the comma.
635.0," This comma here, if you will miss it, you will get an error."
638.0," Trust me, I learned the hard way."
640.0, Now let's jump to the other URLs dot by file.
643.0," Of course, by default, we have the admin path."
646.0," We need another path, which is similar to the other path that we have just created."
651.0," And of course, we want to include the Django underscore app or whatever the name of the application you're creating dot URLs."
660.0, And Django is complaining here because I need to import the include method.
666.0, Now let's go to index.html.
668.0, The most important thing in any of your HTML files within your Django project is to start this HTML file by load static.
677.0," Because this way you're saying, hey Django, listen, I want this index.html file to load all of the static files included in the project."
686.0," So to do that simply in any HTML page, you would do double curly braces, double and percent load static."
695.0," Okay, and make sure you have proper spaces."
699.0," Once you do that, you can get your usual boilerplate for any HTML file."
704.0," So I'm going to type here Django is awesome, for example."
709.0," And what you would do in any normal HTML file to link your styles.cs is to do link styles.cs here, whatever, right?"
719.0," In Django template language, that's very similar, except that we will have different syntax."
724.0," So we'll keep the link tag with the REL style sheet and with the horizontal reference, that's where we're going to change."
730.0," So again, with those curly braces, double and percent, I'm going to type static and then I'm specifying the exact location."
740.0, So that's going to be inside styles folder for slash styles dot CSS.
747.0, Let's check that out.
748.0," Indeed, inside styles, we will have our styles dot CSS. Let's go ahead and create that."
755.0, So styles dot CSS.
758.0, And we'll do the same thing to link our JavaScript file.
762.0," So usually you would do script column source and in the source, you're defining the exact location of your JavaScript file."
769.0, So we're going to do the same thing like we have done with styles dot CSS.
774.0," So double curly braces, double and percent and we're saying here static and we're specifying the folder."
780.0, So the folder's name is JS.
783.0, So JS forward slash and let's call our file script dot JS.
789.0, And let's go to our JavaScript folder and create that file script dot JS.
795.0, Right.
796.0," Also, I want images."
798.0, So let's have image with the source.
802.0," So the source again, I'm going to do the exact same thing like we've done with JavaScript and styles dot CSS."
809.0," So curly braces, ampersand and again, I'm going to type static."
814.0, Make sure to have this properly spaced.
817.0, And I want exact location.
820.0, So that's going to be images forward slash.
823.0, And I'm going to put a logo for Django simply.
826.0, So logo dot png.
828.0," And as an alternative here, you can type just Django logo."
833.0, Right. And let's have H1 tags.
836.0, And here I can say welcome to Django.
841.0," Also, let's have a paragraph and let's type something that makes sense."
846.0," So Django makes it easier to build, to build better."
852.0, What apps.
855.0, More quickly.
858.0, And with less code.
861.0, All right.
862.0, So this is simply our HTML page.
865.0, And I'm going simply to put a Django logo in images.
869.0, So this is our Django logo.
872.0, All right. And the file here is called D logo.
876.0, So make sure to type that properly.
879.0, So D logo.
880.0, Okay. In order to identify the file in your images folder.
885.0, All right. Let's open our integrated terminal control.
888.0, L2 to clear the terminal.
890.0, And let's go ahead and run our server by thumb manage.py.
895.0, Run server.
896.0, And we have a very nasty error message.
899.0, And I know why we have this error message.
902.0," I didn't do that deliberately, but I was expecting something like that."
905.0, I told you that commas are very important in Django.
909.0, If you'll go to settings.py.
911.0," And if you will take a look to our static files, DURS,"
914.0," this is a tuple, right?"
916.0, You need actually a comma after the first line.
919.0," So you need to put a comma like that, control as to save."
925.0, And let's try again.
927.0, Now everything is working properly.
930.0," So again, guys, beware of those commas."
933.0, It's very tricky.
935.0," And if you remember in one place,"
937.0, I'm sure you will forget it in different place.
939.0, So you need to be very careful about commas.
942.0, All right.
943.0, So let's go ahead and open our URL.
947.0, And there we go.
949.0," We have our HTML, we have our page."
952.0," And the styling well, we didn't write styling,"
955.0, or we didn't try JavaScript yet.
957.0, But at least the image is being rendered.
960.0," All right, let's go ahead and work on that."
962.0, Let me first go to styles.
964.0, Let's go to style.cs and work on some styling.
968.0," So as you can see, I've split the screen into two parts,"
971.0," one for coding, the other one to display the web page."
974.0, Okay.
975.0, So let's go and change a little bit in the body.
980.0, And let's have fun family.
982.0," I want to make it aerial, sense, serif."
985.0, So let's keep it this way.
987.0," Also, let's change a little bit in the background color."
991.0," And I want to make it F4, F4, F4."
995.0," I'm doing control S now, and I will refresh the page."
999.0, And you can see immediately that everything has changed.
1002.0, The background color and the font.
1005.0," Also, let's change the color."
1007.0, Let's do triple three.
1009.0, Let's also align everything to the center.
1012.0, So text align center.
1014.0, All right.
1015.0, Let's refresh.
1017.0, Okay.
1018.0, Awesome.
1019.0, So adding.
1020.0, So 20 pixels.
1022.0, Okay.
1023.0, Refresh.
1024.0, Okay.
1025.0, That looks good.
1027.0, Let's do image.
1029.0, Let's give it a width of 100 pixels.
1032.0, I think this is moderate.
1034.0, Okay.
1035.0, That's a bit small.
1036.0, Let's make it 300 pixels.
1039.0, Okay.
1040.0, That's better.
1042.0," And yeah, that's it basically guys."
1044.0, We have rendered styles.cs in Django.
1046.0, The last remaining thing is JavaScript.
1048.0, So we have rendered image.
1050.0, We have rendered styles.
1052.0, And we need to see how JavaScript will work.
1054.0, Let's do document.ad-event-listener.
1060.0, So I'm not sure if you know JavaScript or not.
1063.0," But when we say document.ad-event-listener,"
1066.0, the ad-event-listener here is a method in JavaScript.
1069.0, This method is used to attach ad-event handler to the document.
1073.0, Which means that it allows you to listen for specific events.
1077.0, And that's why it's called ad-event-listener.
1080.0," So events like clicks, key presses, and any other actions."
1085.0," And in our specific case here, we're going to use DOM content loaded."
1088.0, DOM stands for document object model.
1091.0," So once the page is loaded, we want to trigger something by JavaScript."
1096.0, Whatever that something is.
1098.0," So it could be a console.log, it could be an alert."
1101.0, So this is essentially what this ad-event-listener does.
1106.0, I want to create a function.
1109.0, And that's going to console.log.
1112.0," And we can say here, let's say for instance,"
1116.0, page loaded and script is running.
1120.0, Something like that.
1122.0, You can do also alert.
1124.0," You can say alert, hello, Django."
1128.0, Or Django is awesome or whatever.
1130.0, Doesn't matter.
1131.0, And that's basically it.
1134.0," So if we'll do like that, and if I will refresh the page,"
1138.0," I will have an alert telling me hello Django,"
1142.0, which means that the JavaScript is working.
1146.0," And of course, if we'll take a look to the console,"
1149.0, we'll not find anything because the console is busy.
1153.0," So that doesn't make a lot of sense, but you know, you can do that if you want."
1158.0, But it will not do anything.
1160.0, So it's just going to come in this out.
1163.0, And the alert is more convenient in this case.
1166.0," Alright, so JavaScript is working."
1169.0, Images being rendered.
1170.0, Styles are being rendered.
1172.0," And that's essentially everything I wanted to show you in this video, guys."
1176.0, One very important nuance.
1178.0, You can put your static folder in your Django's app.
1182.0, Or you can put it in the base directory.
1185.0," Either way, Django is going to locate and render everything."
1189.0, You'll see this message right here.
1191.0," The directory C Django and so on in the static files,"
1195.0, Durs setting does not exist.
1198.0," That doesn't matter because Django anyway is going through the settings,"
1203.0, checking in the base directory.
1205.0," And if it doesn't find the static folder inside Django's project itself,"
1209.0, it's going to look into the other folders until it will find the static folder.
1215.0, The most important thing is of course that static is not outside the project.
1220.0," Alright, so that's why it's a warning and not an error."
1224.0, But you can do it either way.
1226.0," Anyways, your web page is going to be rendered properly."
1230.0," And just to show you, I'm going to take the static folder."
1234.0, And let me just shut everything else.
1237.0, Let's go here.
1238.0, I will take the static folder and I'm going to put it in the Django project's base folder.
1244.0," Okay, so you have now Django app Django project and static."
1248.0, The three folders are inside the Django project folder.
1251.0," Alright, and everything is still running perfectly."
1256.0, Now you will see that this warning has disappeared.
1259.0, And nothing actually has changed.
1261.0," If you refresh, you will have everything working as it was."
1265.0," And again, if you will take the static folder and if you will put it in the Django app folder again,"
1271.0, and let's refresh Django is smart enough to identify where is your static folder within your project.
1281.0," And anyways, your web page is going to be rendered properly."
1285.0," Alright, so in the next video we're going to delve deeper into another powerful feature of Django,"
1290.0, which is going to be Django forms.
1293.0, Thanks so much for watching guys and I will see you in the next video.
