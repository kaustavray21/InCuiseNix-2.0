start,text
0.0, Hello and welcome back!
2.0, Congratulations on reaching the final chapter!
5.0," You have made it to the last chapter of this Django course, and that's a fantastic achievement!"
10.0," Your dedication and hard work have brought you to this point, and now it's time to tackle one of the most important aspects of web development."
18.0, Authentication
20.0," Authentication is a crucial aspect of web application development, ensuring that users can securely log in, access protected resources, manage their accounts,"
29.0," and not only that, but new users also can sign in or register from your website, instead of creating a super user with a username and password from the command line."
39.0," And in this tutorial, we're going to build a simple authentication form using Django Authentication system."
45.0," Django Authentication system has a lot of out-of-the-box tools that can help you create a form that can have registration, login, and logout functionalities in no time."
55.0," So there is a very important module called Django.contrib.auth, which is responsible of creating your authentication."
62.0," So you will find it by default in your settings.py, and it's generated by the Django Admin Start project."
69.0," So don't worry, we're not going to install anything outside of Django."
73.0," Right, so we're going to see the middlewares, we're going to see the sessions and all that."
79.0," Ultimately, the objective of this tutorial is to know how to set up user registration to allow new users to create accounts, how to implement user login functionality to authenticate existing users,"
90.0," also to create a logout mechanism to securely log users out of their accounts, and finally how to protect specific pages so that only authenticated users can access them."
101.0, We're going to see all of that in today's tutorial.
105.0," All right, so I'm inside the global folder here, and I want to go to a lesson 10 authentication."
114.0," Then I will activate the virtual environment by PPMV shell, of course."
121.0, And then I will install Django using PPMV as well.
131.0," All right, awesome. Now I can create my project Django Admin, start project, and let's call this one off project."
144.0, Then I will change directory to off project.
149.0," Let's see what we have. Okay, so we have the oath project and manage the pie."
155.0, I can increase this a little bit and we can shut the explore for now.
160.0," Then, right, let's do that again. Okay, so I will use the manage.py command line to start my application, and I'm going to call it off app."
173.0," So we'll have off project and off app. Right, so now we have the off app of project and manage.py."
181.0, Let me open the off project. So the first thing that you want to do is to create your user registration.
189.0," But before we do that, we need to go to settings.py and I want to show you something very important."
194.0, So you see the Django.contrib.auth content types sessions. All of that is actually very important for your authentication.
204.0," As I told you, this exists by default. You will not have to install anything outside of Django."
210.0, Let me just add here my application. So that's called off app.
217.0," Okay, and also we will use a static folder for our CSS. I'm going to use CSS."
223.0," I wanted to use bootstrap to be honest, but I thought maybe we can leave that to the final project."
229.0," We can use bootstrap. For now, I'm going to use simple CSS styling."
233.0," So we'll need the static files, doors. This is a tuple, of course, as we know. So os.path.join."
243.0, And I want to join the base directory with the static folder. Right. And we need to go up and import the operating system module.
255.0," All right. And we are set for now, because we'll need to return back to redirect to the homepage after the login."
265.0, It's very early on to show you this. So we're going to shut the settings.py for now.
269.0," And we'll go to create the user registration, which is going to be forms.py in my application."
274.0, So I'm going to create this forms.py file. And we've seen the last lesson how to create forms.
283.0," So from Django, I want actually to import the forms module. That's the first module."
290.0," Also, I will need the user model. The user model is imported from Django, of system."
296.0, So the way to do that is from Django.contrib.auth.models. I want to import the user.
307.0," This user class or model is very important, because without it will not be able to let the user enter the user name and password."
314.0, Because without it will not be able to let the user register in the login form.
319.0," So yeah, we'll need this for the user name and password and password confirmation and all of that."
325.0, So these are the two models or the two things that I want to import forms module and the user class.
333.0," Alright, so I want to create a class and this is going to define a form for user registration using the model form."
342.0, I'm going to call it register form. This is form of course form registration.
348.0, And we're going to pass as the main parameter the forms dot model form.
355.0," So for the register form class, I will need two main things, the password and password confirm."
362.0, The password is going to take the forms module dot character field.
369.0, So this character field here is going to have a widget and the widget is going to take a password input from the forms module.
377.0," So accessing the character field, we can have a widget and that widget here is equal to forms dot password input."
386.0," You see, this is very easy and simple with Django. Everything is out of the box available for you to use it."
393.0, So this is concerning the password. I also will need the password confirm.
398.0, And this is of course to confirm the password field like you would do in any website where you register for the first time.
406.0," It's going to be basically the same, but I'm going to add a label and here I'm going to type confirm password."
414.0, Then I'm going to have a metadata for the form. So that's going to be a class called meta and I'm going to define the model to be equal to the user.
425.0," And here simply I'm using the user model, all right, but also I need fields."
430.0," So the fields here are going to be the username, the password and the password confirm."
435.0, So that's the list of those fields user name password and password confirm.
448.0," Right, so these are the fields to include in our form. Till now we haven't added any validation logic for our Django form."
456.0, This is going to be done through a function that I'm going to create and I'm going to call it clean.
462.0, This clean function takes self of course pertaining to the self object.
467.6, And this is actually a custom clean function or method for additional validation.
473.4, And I'm going to use that actually to ensure that certain conditions are met
478.2, beyond the basic field validations provided by Django.
481.6, So let me show you what I want to do.
483.4," First of all, I want to create a variable and I'm going to call it cleaned data."
488.8, This clean data actually is going to call the parent class as clean method.
494.40000000000003, So this is all about inheritance from the super class and we're going to inherit a method called clean.
501.8, Now you can read the description of the clean method.
504.40000000000003, It says here that this is a hook for doing any extra formwide cleaning after field.clean has been called on every field.
512.8, So any validation error raised by this method will not be associated with a particular field.
518.4, It will have a special case association with the field name underscore underscore all underscore underscore.
524.4," So in English, this is a method of the parent class, which is form or model form."
529.4, And this actually performs the standard cleaning and validation of all fields in the form.
535.4, And then you want to store the result in this clean data variable.
539.5999999999999," All right, because we're going to use it now."
542.2," All right, so let's call on the clean method and the next variable I want is the password."
548.0, The password is going to be equal to the clean data dot get method to get the password entered by the user.
557.2," And finally, I want the password confirm."
559.8000000000001, So maybe I can do like that.
563.0," So the password confirm here also is going to take the clean data dot get and instead of getting the password,"
569.6, it's going to get the password underscore confirm.
573.4, The next step is very important.
575.4, This is simply to check if the passwords match.
583.4, And the way to do that is I'm going to check out if password and password confirm and password is not equal to password confirm.
599.2," In this case, I want to raise validation error."
603.4000000000001, That's a sort of error that's inside the forms module.
607.4000000000001," So forms dot validation error and this validation error, we can write here any message."
614.4000000000001," And this message here, we can write any message that we want in order to alert the user that the passwords do not match."
623.6, So we can say simply passwords do not match.
628.2, And else I want to return the cleaned data.
633.8, So we are returning actually the clean data if the validation passes.
638.2," All right, awesome."
639.6," Following that, we want to add views to handle the user registration."
643.8, So we're going to import different things here.
647.4, First thing that I want to import with render is of course the redirect function.
652.2," Right, we have seen that the last time."
655.0," Also, I will need to import from Django dot contrip dot auth."
662.8, I want to I want to import authenticate.
669.8," Also, I want to import login and I want to import logout."
673.8," You see all of these functions, all of this is code actually written and embedded inside Django."
680.4, You don't have to reinvent the wheel here.
682.6, You have everything in your possession.
684.2, You need only to know how to use it.
686.2," Also, I want to import from from Django dot contrip dot auth dot decorators."
695.8000000000001, So we're going to import the login required decorator.
699.8000000000001, So the creators in Python.
702.0, This is pure Python.
703.0, So I hope you know what the creators are.
704.8000000000001," But if you don't know, simply there are special functions that modify the behavior of other functions or methods."
711.6, And they're typically used to add functionality like we're doing here log in or access control without changing the original functions code.
720.0, So they are immediately invoked and they trigger other functions.
724.6," Alright, so that's the one that we're interested in the login required."
728.2," Also, I want to import from Django dot contrip dot auth dot mixins."
734.2, So mixins are simply reusable classes that can add specific functionality to class based views without being the primary parent class.
744.8, I know we haven't studied class based views.
747.6, We've only studied the function based views.
750.0, So the function based view and class based view basically do the same thing.
754.2," One uses function, the other one uses classes."
757.2," Alright, so I don't need the login required, but rather I need the login required mixing."
764.6," If we'll hover over this as a class, as you can see on the screen, and it verifies that the current user is authenticated."
771.0, So we're going also to touch on the class based views in this tutorial.
774.8000000000001," And speaking of class based views, I will need to import from Django dot views."
780.8000000000001, I want to import view.
782.8," Also, I will need the user class."
784.8, So that's from the Django dot contrip dot auth dot models.
792.0, I want to import user.
795.0, And the last thing I want to import from forms.py the register form class import the register form from forms.py.
813.8," Alright guys, so let's go ahead and start creating our first function."
820.0, So actually we'll have different functions.
823.0, The first one is register view and that's taking the request of course.
828.0," For now, I'm going to just pass."
830.5999999999999, I'm going just to type all of the functions and then we'll tackle them one by one.
835.0, The next one is for login.
837.0, So login view also taking request of course.
843.8, And that's of course for the logout.
848.8, And this right here is going to be for the home view.
853.0, So I'm going to use the decorator actually here.
856.0, So using the decorator.
860.0, So the decorator here is going to be used to require login for this view.
864.5999999999999, So that's going to be the login required.
868.4000000000001," Right, this one after the decorator comes your function actually that you want to invoke."
873.8000000000001, So that's going to be home view and taking request.
880.4000000000001, And that's going to also for now we're going to pass.
884.4000000000001," And yeah, that's basically it."
886.8000000000001, Let's go ahead and start by the register view.
890.6," So for the register view, the first thing that I want to check out is the request method is post or not."
899.0," So of course, that's registration form."
902.6, So the HTTP request method is going to be naturally a post request.
908.0, So if request method is equal to post.
913.6, So that's going to be saved in form variable.
916.4, I'm going to take the register form class and we're going to pass inside the request dot post.
923.0," So we're going to post the request actually, right?"
927.0, And we're going to save it in this form variable.
929.8," Next, I want to check if this form valid or not."
933.1999999999999, So I'm going to check out if form is this is a method called is underscore valid.
939.8," And if it's valid, I want to get the clean username data."
944.0," Not only the username data, I need also the password data."
947.6, So I will need a username.
949.2, The user name is going to be equal to the form dot clean data dot get method and get method is going to fetch that username and the same thing exactly for the password.
962.6, And we can change this.
964.4, So that's going to be the password here.
967.8, The next thing I want to create a new user.
970.8, So that's the usefulness of that user model or user class that we've imported.
977.0, So I'm going to take the user class and I will access the objects dot method called create user.
983.4, This is going actually to create the user based on the username past.
987.8, So the user name is going to be equal to whatever user name being entered.
992.6," And the same thing for the password that's going to be equal to the password, the password entered."
998.8000000000001, Right? And I'm going to store all that in a variable called user.
1003.0, Then take a look to the following.
1005.4, There is a method actually called login.
1008.2, So you can see that it says here it persists a user ID and a backend in the request.
1013.6, This way a user doesn't have to reauthenticate on every request.
1018.6," So actually the login function takes three arguments, but we're going to use to only the first one is the request."
1024.6," And of course, it's going to be a post request, right?"
1027.2, Because we're checking out if the form is valid.
1029.8," And we want to post everything, right?"
1032.8," The user name, the password, right?"
1035.6, That's typically a post request in the registration form.
1039.8," Also, I want the user that we have just created here, right?"
1044.2, That's taking the objects that create user with the user name and password.
1048.8," And finally, we want to redirect the user to the home page after logging in."
1054.6000000000001," And here actually comes the usefulness of this method redirect, which is used to redirect the user to different page."
1061.0, So we're going to return redirect and I'm going to redirect the user to the home page.
1069.0," Now we haven't created your else yet, but that's going to be the name of the home page, right?"
1075.8, We're going to create different folders here.
1078.6, You can do it again in the application or you can do it in the root folder.
1083.6, It really doesn't matter either way.
1085.8, Everything is going to be properly rendered.
1089.0, All right.
1089.6," And what if the form is not valid in this case, I want to create an empty form instance."
1097.0, So form is going to be equal to the register form.
1100.8, That's not all because I want to render the registration template with the form.
1105.6," Again, we haven't created in your else yet or any HTML pages yet, but we'll have a page called register.html."
1113.0," So I want to render taking the request, of course, as first parameter."
1119.8, And the second one is the URL name that's going to be in a folder called accounts inside it.
1126.6, I will have register.html.
1129.6," And don't forget about the last argument, which is our context."
1132.6, And this is a dictionary and it's going to hold the registration form.
1136.3999999999999," So the form here in single strings that's going to be the key and the value is going to be the form itself, the register form itself."
1143.6, All right.
1143.8999999999999, So this is our register view.
1145.3999999999999, Now let's go ahead and create our login view.
1148.3999999999999," Of course, the login view is very important for your login functionality."
1152.3999999999999," Without it, the user will not be able to log into the website."
1155.4, So the login view actually looks like the register view.
1159.2, So we're going to start it at least the same.
1161.9, So we're going to check out if the request.method is equal to post.
1168.9," And in this case, I want again, username and the username here is taking the request.post.get the username itself."
1181.2, The same thing for the password.
1183.0, So maybe it would be smarter to do like that and change both in the same time.
1188.7, All right.
1189.2, Now I want the user itself.
1192.0," Instead of using the user class, I'm going to use a method or function called authenticate."
1198.5, Because we are authenticating the user as the user is already registered.
1203.0, So I want to use this method called authenticate.
1209.0," And as you can see, it's a here that if the giving credentials are valid, we will return a user object."
1214.8, So that's exactly what we want.
1217.0," We want to pass inside the authentication method, a request itself, which is going to be post."
1224.3, The second and third arguments are going to be the username and password.
1228.0, So the username is going to be equal to the username itself.
1233.6, Also the password is going to be the password itself of the user for logging in.
1240.5, Right.
1240.8, So this is the login view.
1242.3, But that's not it because we want to check out if the authentication was successful.
1246.3," In other words, I want to check out if the user is not none."
1250.8," In this case, I want to log the user."
1252.9," Again, I'm using this beautiful login function that takes request as first argument and user as second argument."
1261.1, And here simply I'm going to take the request dot post method dot get next.
1268.4, So we're simply saying here that we will store those options in a variable.
1273.6," First option is with the post request dot get next, which means the next the next URL."
1280.9," Or that's going to be the same thing, but instead of post that's going to be get request."
1287.5, So we're going just to change the name of the HTTP method.
1292.5," The last option is going to be simply home, right."
1295.9, That's going to be the home page that we're going to create.
1298.7, And I'm going to save all that in a variable called next URL.
1304.4," And then we will redirect the user to this next URL, right."
1309.0, But let's just return that.
1312.0, But what if the authentication was not successful?
1315.3999999999999," In this case, I want to set the error message."
1318.2, So we'll see something like invalid invalid credentials.
1324.6, Right.
1325.6, And I'm going to store it in error message.
1330.7, So this error message actually is going to be entered in the context within the render method when we're going to render the login dot HTML page.
1339.7, So let's go ahead and do that.
1342.0," Let me just make sure that I'm on the same line or properly invented on the same line with the if L statement, right."
1349.1000000000001, So I want actually to render.
1354.8000000000002, We're render here first is the request.
1357.8000000000002," Next, the accounts we're going again to put this log in dot HTML file in a folder called accounts."
1365.7, So accounts will hold the log in the log out.
1368.3000000000002, We're going to see that later.
1370.5," The context, as I said, that's going to be key value pair, the error being the key and the value being the error message that we have just created."
1381.2, So that's going to be the error message past as a context inside the render function.
1386.9," Now, let's go ahead and tackle the next function, which is the log out view."
1392.0," Now, the log out view is one of those functions that are very easy and simple to write whenever you're writing your authentication."
1400.4, So that's the same thing here.
1401.4, Right.
1402.4, So we're going to take that.
1404.4, Maybe do like this.
1406.4, I'm going to just take the whole line.
1409.4, Right.
1410.4, Then just put it down here below.
1413.4, Right.
1414.4, So this is the first checking.
1416.4, So we're going to do this.
1418.4, So we're going to do this.
1420.4, So we're going to do this.
1422.4, So we're going to do this.
1424.9, Right.
1425.4, Then just put it down here below.
1427.4, Right.
1428.4, So this is the first checking.
1430.4," And if that is the case, if the method is posed, I will invoke a function called log out."
1439.4," Like log in exactly, we have the opposite for logging out."
1443.4, So that's going essentially to remove the authenticated user's ID from the request and is going to flush their session data.
1451.4, So actually this takes a request and we want to return to redirect the user to the log in page.
1462.4," And if the request is other than posed, get for example, in this case, I will redirect the user to the home page."
1475.9," When you will click on the button to log out, you will be redirected to the log in page."
1481.4," And if the request method is a get method, we're going to redirect the user to the home page."
1486.4, Right.
1487.4," Now let's go ahead and tackle our last function here, which is our decorator, the login underscore required."
1493.4," And this is actually a way to enforce the user to be in his home page if the user is logged in, of course."
1499.4," So that's why the name, even of the decorator is log in required."
1503.4," Only if the user is logged in, we want to keep the user inside the home page."
1508.4," So here I'm going to render, of course, taking the request and the template's name is going to be home.html or index.html."
1517.4," Really, it doesn't matter."
1518.4, And I'm going to put that in a folder and I'm going to call it home and file itself.
1523.4, I'm going to call it home.html.
1525.4, So that's simply to render the home template.
1527.4, Now I want to create something called protected view.
1531.4, The protected view is going to mimic any protected area only restricted for logged in users.
1539.4, Anyone who is not registered or logged in cannot see the content of this protected page.
1544.4, So I'm going to create this class and I'm going to call it protected view.
1549.4, And it's going to take the login required mix in as first parameter.
1555.4, And the second parameter is the view.
1558.4, That's why the comment was the same here for class-based views for both the login required mix and view.
1566.4," Alright, so let's move on. I want the URL to redirect to for login."
1571.4, So this is going to be the login URL.
1574.4, But also I want to query a parameter for redirect URL.
1578.4, That's going to be the redirect to.
1580.4, So this class is going to have two different objects.
1584.4, The first object is the login URL and the second object is redirect field name.
1591.4, Those two objects are necessary in the protected view class.
1595.4, Because we need one for a URL to redirect to for the login and the second object which is redirect field name.
1604.4, Typically that's actually set to next.
1607.4," Right, but we're going to write a custom redirection."
1612.4, But just for you to know that this is the usual one.
1616.4, I'm just going to put this here next to redirect URL.
1624.4, I'm going to write a custom one here and I'm going to call it redirect to.
1631.4," Then we'll write a simple HTML page that's going to play the role of protected area of that website,"
1637.4, which is only restricted to those who are actually logged in.
1642.4," So I'm going to create a function called get and it takes self as first parameter, request second parameter."
1651.4, Then we're going to render request as first parameter again and the template's name.
1658.4, I'm going to put it in a folder called registration.
1663.4, And inside that folder I'm going to create this file called protected.html.
1669.4, So this is basically everything that we have in our views the pi file.
1676.4," Right, we have written quite some code here."
1679.4," We have written four different functions for the registration, for logging in, for logging out,"
1688.4, and the login required decorator for the home view.
1692.4," All right, so let me go to my application here and let's create a folder together."
1700.4, I'm going to call it templates as usual.
1703.4, In templates I will have three different folders.
1706.4, The first one is accounts.
1709.4," The second one is off, off one underscore app."
1715.4, And the third one.
1718.4, I'm going to call it registration.
1722.4, Inside accounts I will have three different files.
1726.4," The login.html, the logout.html, and the register.html."
1740.4," For the auth app, I will have or auth one underscore app."
1745.4, I will only have the homepage home.html.
1750.4," And for the registration folder, I want to create a file, which is going to be for the protected view."
1758.4, Protected.html.
1760.4," Right, let me go and make migrations for now, even if nothing to migrate."
1766.4," We haven't created any models, but this tip is very important."
1771.4," So I will do Python, manage.py, make migrations."
1778.4," Okay, awesome."
1782.4," If no changes detected, that means that we don't have any errors."
1787.4, And my great migration is completed.
1791.4," So no errors, that's fantastic."
1794.4, Now let me shut the integrated terminal.
1797.4," And just before we forget, we can actually create this folder also for the styles."
1803.4, So static inside static will have styles.
1808.4, And inside styles will have styles.cs.
1812.4," All right, awesome."
1814.4, So now let's go to the register and write this page.
1818.4," And as always, we're going to start this with load static."
1824.4," Right, or the title, we're going to say register."
1830.4," Right, for the styles, let's just do link."
1836.4," And for the href, meaning I can give it type also."
1841.4, So let's explicitly give this type of text for slash CSS.
1848.4," For a horizontal reference, we want to pass the correct path."
1854.4," Right, so that's going to be styles for slash styles.cs."
1859.4," Yeah, and I think that's everything for the head."
1863.4," As far as the body is concerned, we want a div with class of container."
1867.4, Here I will have h2 tag and I will say here register.
1871.4," And of course, we need a form for registration."
1875.4, So the action for the form is going to be the URL for the register.
1881.4, The file is called register.html.
1884.4, We're going to give it a name of register in views.
1886.4, And that's going to be inside curly braces and ampersand.
1890.4, And here that's the URL.
1893.4, I want to go to the register page.
1896.4, And that's actually going to be submitted when you will click on the register button.
1900.4, Do not forget about the method.
1904.4, That's post method.
1907.4, We have a post method and we have the action to take us to the register page.
1913.4," Right, so inside here whenever you have a form with post method,"
1918.4, you need to have a csrf token for security.
1922.4, The csrf token or the cross site request forgery is very important to protect you against malicious attacks.
1929.4," And whenever you have a form with post method, you need to have a csrf token."
1934.4, The csrf token is very important to protect you against any malicious attacks.
1940.4, csrf stands for cross site request forgery and this token is used for security.
1948.4," Next, I want to render the form fields as paragraph elements."
1952.4," So if you remember, we have made that the last time, form.as underscore p."
1959.4, That's going to be wrapped around double curly braces.
1963.4," And finally, we will need a button with type submit."
1966.4, And we're going to write here register.
1969.4, So we're actually letting the user click on that button to register.
1973.4, And the form is going to take the user to the registration page.
1978.4, That's basically our register.html page.
1981.4, A simple form with a button called register.
1984.4," When the user clicks it, it will redirect the user to the register.html."
1989.4," All right, now let's go ahead and write our login page."
1993.4, So the login page again with the load static and we'll wrap that in curly braces and amperset.
2004.4, And we'll have a normal hml file again here in the title.
2009.4, I'm going just to type login.
2011.4," And of course, we will need maybe I can take it from the other file."
2016.4, So we can take it from the register.
2018.4, I need the styles.
2020.4, So we're going to copy that actually.
2023.4, And let's paste it in the login.
2025.4, And I'm going to paste that under the title.
2028.4, One thing that I don't want to forget is that I will need style.
2032.4, Here's style for the error message to be in red color.
2041.4, But that's going to be only one line that's going to be for the error message.
2046.4, I want the color for that message to be red.
2049.4," And that's going to be the error message if a user tries to log into the website, but he's not registered."
2054.4," All right, let's move on."
2056.4, Let's go to the body and let's have our form.
2059.4," Again, I will need h2 tag and here I will write login."
2064.4, And also I will need a form with the action.
2067.4," Again, I will need to go to the login URL."
2071.4, And also do not forget the method that's going to be post.
2074.4, So method here is post.
2078.4," And in the form, I need to have the CSRF token."
2082.4, So we'll have the CSRF token.
2085.4, And here goes a very interesting part.
2087.4, It's going to be a hidden input to store the next URL after the login.
2092.4, So basically this is a hidden input.
2097.4, And let's write that.
2099.4, So that's going to be an input field.
2101.4, But we will have a hidden type.
2104.4, So that's not going to be visible.
2106.4, And I'm going to give it a name of next.
2109.4, And the value is going to be equal to next.
2114.4, So that's going to redirect the user after I will need a div with class form group.
2122.4, So that's going to be a div for the user name input field.
2125.4, So that div will have a class called form dash group.
2130.4," Inside the div, I will have a label."
2133.4, This label will have the user name.
2136.4, So for user name and here is going to be user name.
2140.4, So that's the label.
2141.4, But also I want the input field.
2143.4, So that's going to be off type text.
2146.4," Also, I will give it a name of user name."
2153.4, Right.
2154.4, And I will give it an ID of also user name.
2158.4, Right.
2160.4, And that's going to be a required field.
2162.4, Right.
2163.4," So if you will try to just hit on the login button, you will get an error because that's a required field."
2169.4, I will need the same thing for the password.
2172.4, So what I'm going to do is I will take all that and I will duplicate it.
2176.4," And that's going to be instead of the user name, I'm going to change all that."
2181.4, That's going to be password.
2183.4, Except that here I want to p capitalized.
2186.4," And just below here, I need a button."
2189.4, That button will have type submit and will type here login.
2194.4, Right.
2195.4, So here I need to check if there is an error message.
2199.4, So here is checking for any error messages.
2205.4, So what I want to do is I want to add some logic.
2209.4," So I'm going to say if error, I'm going to wrap that like this in curly brace and percent."
2216.4, And don't forget to finish that.
2218.4, If error by end if in one word like this.
2223.4," And inside that block, you will write your whatever you want to write."
2227.4," Actually, I need to display the error message in red if it exists."
2231.4, So that's going to be in a paragraph of class error.
2235.4, And we're going to pass here the error.
2238.4, Right.
2239.4, So that's not going to be always on the page that only going to appear whenever we will have any errors.
2245.4," And before the end of the form, we'll have this option to register if you don't have an account."
2251.4, So that's going to be in a paragraph.
2258.4, And we'll insert inside here an anchor.
2261.4, This anchor will take the user whenever he will click on will type here register here.
2268.4," Whenever the user is going to click on register here,"
2272.4, that's going to redirect the user to the register page.
2275.4, That's going actually to be like that.
2279.4, This URL and that's register page.
2283.4," Again, we're going to change the names or give names for the HTML templates."
2290.4, So the register.html is going to be called register log in.html is going to be log in and so on and so on.
2298.4," All right, guys."
2299.4, So this is everything in our log in.html.
2302.4, Now let's go ahead and write our log out.html file.
2307.4," So again, we're going to start that with load static and we're going to wrap that in double m% and curly braces."
2318.4, And that's going to be a simple HTML file.
2321.4," Here, I'm going to call this page log out."
2327.4," And again, we're going to have our styling."
2329.4," And in the body, I'm going to have a div with container class."
2335.4, And I will have h2 tag.
2337.4, We'll say here log out.
2340.4, And we're going to just ask the user if you're sure that you want to log out.
2346.4, So are you sure you want to log out?
2353.4, Right.
2354.4, So this is the paragraph and of course we'll need a form and the form will naturally have a post method.
2360.4, The action here is going to take us to the log out page.
2364.4," So curly braces, ampersand, and here the URL."
2368.4, And that's the log out.
2370.4, All right.
2371.4," In the form, of course, we'll need the CSRF token."
2374.4, And I will need a button.
2375.4, That button will have submit type.
2377.4, And I will call it log out.
2379.4," And in case the user wants to change their mind, they can simply click on cancel."
2384.4, So let's have an anchor.
2386.4, And this anchor will have the home URL.
2389.4, Right.
2390.4," So if you will cancel, you will get back to your home page curly braces ampersand URL."
2396.4, And we want to go to home in case of cancel.
2400.4, And that's basically everything that we have in the log out page.
2404.4, So great job.
2405.4," We've actually written the register page, the log out page and the login page."
2410.4, Now let's go to the home page and write that real quick load static.
2414.4, And that's wrapped in curly braces ampersand.
2418.4, And I'm going to change the title to be home and do not forget about this styling.
2423.4," So in the body, now we're going to have again a div with container class."
2431.4," Inside here, I will have h2tag."
2433.4, We'll see here home.
2435.4, And I want you to be greeted with a welcome message when you log in to your home page.
2441.4, So we're going to put that in a paragraph.
2443.4," So I'm going to say here welcome and here in double curly braces, request dot user dot user name."
2451.4, Right.
2452.4, That's going to hold the actual user name of the logged in user.
2456.4," Next, I want to redirect the user if they want to the protected page."
2461.4, This is going to show that the user can enter a reserved area to the logged in users only.
2467.4, So that's going to link us to the protected page.
2470.4, So I'm going to have an anchor again with horizontal reference going to the URL itself.
2476.4," So double ampersand in curly braces, here URL and the name of the page is protected."
2484.4, And here simply we can see something like go to your protected page.
2491.4," So whenever the user is going to click on go to your protected page, they're going to see the protected page that we haven't actually written yet."
2498.4," Yeah, that's the main idea, but also I will need a form and that form is a post form with the action of going to the log out page."
2509.4, So I need curly braces double ampersand again and I need your L here to go to the log out.
2516.4," And in the form here, I want of course the CSRF token."
2521.4, And also I will need a button. The button is going to be a submit button naturally and we're going to call it log out.
2529.4," So whenever the user is going to click on the log out button, they're going to be redirected to the log out page."
2535.4, Right. And that's basically everything that we have in our home page guys.
2541.4," Now let's go ahead and write our last page, which is protected page."
2546.4," And again, that's very easy and simple to do. We're going just do not forget about the load static."
2554.4," So load static and in the title, I'm going to right here protected. Don't forget the styles."
2565.4," Right in the body, I want also like we have done in all of the pages, dev with container class."
2574.4, We'll have H2 tag inside I will have here protected page.
2579.4," A paragraph that can you know say Laura Epson, right? And yeah, that's everything."
2585.4, So we need also a link to the home page. So that's going to be an anchor that will take us to URL homepage.
2597.4, And here we can just write home like that. Right. And this is our protected page.
2602.4," Now of course, if we will run our server, we will not find anything because we haven't said the URLs yet."
2610.4," Right. So we'll need to work on that. So first of all, we'll need to create URLs.py file in our application."
2618.4," And of course, the URLs.py exists already in the project. So let's set this up first."
2623.4," The first path, we know it already, that's the admin dashboard path."
2627.4, But also we need a path on an empty route. So that's going to be on empty strings like that.
2634.4, We want to go to or we want to include our application dot URLs.
2640.4," Now the URLs in our application, we haven't written yet. So I'm going just to write it, even if that doesn't make a lot of sense now."
2648.4, But we want that this is a standard actually setting configuration that we need to do every time we write URLs.
2658.4," Right. So we need from from the Django.urls, we need to import the path and include."
2664.4, So actually we need three different path one for the log in the logout and the register.
2670.4, So path. So the first path is going to go to the log in. So that's inside accounts folder that goes to the log in page.
2680.4," But we will need to link the path to the view. So if you will go to views, actually I need the log in view."
2688.4," And the login view here is inside the views.py. So I will need to import from our application, which is called auth app."
2697.4, I want to import the views. And now I can use the views here to link the accounts for slash login.
2704.4, So that's the location of your template with the actual views. So views dot login underscore view.
2715.4, And I'm going to give it a name of login. So that's the first path. But just don't forget the comma.
2723.4, And the second one. So I'm going actually copy to for the log out and the registration.
2730.4," So login instead of login, I'm going to change everything to log out."
2738.4," And also here instead of login, we're going to change that to register."
2744.4, That's convenient. So we are almost there. We need now to go to the URLs in our application.
2751.4, So I want from Django dot URLs to import the path.
2757.4, Next I want from the current directory to import the views.
2763.4," Now I want your L patterns, of course, as always, and we need also different path."
2769.4," We will need the login, the log out the register, but also we will need the protected view."
2774.4," Right. So I need the first path that's going to be the login route. So on login forward slash, I want views dot login view."
2788.4, And also the name should be exactly the same name that we've given in your else the pie in the project.
2796.4, So just minimize this a little bit. All right. So that's the first one. We need three more.
2803.4, So login and we'll change that to log out.
2809.4, And we will change this to register. And the protected view class that we've created with class based view.
2818.4, So that's going to go to protected route and here views dot protected view dot as underscore view.
2829.4, And that's not again. We're going to call that protected as well. Right.
2834.4," There is something's missing here. Of course, the home page. So I want this last path to go on an empty route."
2841.4, I needed to go to views dot home underscore. Let me just check real quick. That was called the home view.
2852.4," That's right. So I'm going to copy that. That's going to be here. Right. Home view. Also, I'm going to give it a name of home."
2862.4," When I was creating the HTML pages, I said by mistake, we haven't created names in views yet."
2868.4," Actually, it's in URLs. So in the settings.py, what you want to do is you will go down below and you will do some configuration steps in regards to redirection to the home page after login."
2881.4," So when you will login, you want to be redirected to the home page. I will have a variable. And I'm going to call it login underscore redirect underscore URL."
2893.4, And that's going to be equal to the home page. That's it. Simple as that. You don't have to change anything else in settings dot.py.
2903.4, So let's go ahead and open our integrated terminal and try to run our application. Python manage.py run server. And we have an error.
2915.4," No module named Django dot view. Indeed, it's Django dot views. I misspell that in views.py maybe. Yeah, indeed, we have this quickly line. That's S. Right."
2930.4," So that's register view. And yes, of course, that's just by mistake. I apologize for that guys. And return, of course, that's going to be here for the off one underscore app. I've just called here home. Well, actually, I will change it back to off one underscore app and we'll keep it this way."
2951.4, Right. So that's the last thing that I want to change unless we will discover any bugs when we'll run the server. All right. So let's go ahead and run our server. Let's do Python manage the pi run server.
2967.4," And there we go. We have a login page user name password login register here. And if you will change the route and if you will type login, that's going to be the same thing log in basically."
2983.4," But we're not logged in one alternative through the command line. You can create a super user. But actually, we haven't created the register form to create it through the command line."
2994.4," So what you need to do is to click on register here. And hopefully we won't have any errors. Perfect. So this is the register form. Of course, it looks ugly because we haven't added any CSS."
3007.4, Or just the most important thing is the functionality. So let's check that out and let me give this user name speed run 123 password. Let's do hello world at 123.
3022.4, Hello world at 123 register. And there we go guys. This is the home page welcome speed run 123 exactly the way that we have designed it.
3034.4, And we can go to your protected page and log out button if we'll click to go to your protected page tells you here that this is the protected page. This is the space which is reserved to only logged in users.
3047.4, You can click on home and we're back to home. You can click on look out and we're logged out and that gives the chance to other users to log into the website.
3057.4, Now let me go to styles. Yes as quickly and paste some styling that's inside the styles folder. That's basic styling guys. So from the login page by the way in the templates.
3070.4, I've actually deleted the small styling with the comment. I just put it inside the styles. Yes is directly here. So that's going to be for the invalid credentials message. All right. So this is settings for the button and button hover.
3084.4, General settings for the input fields labels form group class right the h2 tag the container and the body right. So let me do control as to save.
3097.4, And let's check out again our website. Let's refresh and we have a beautiful login form. Let's try to login with our speed run user.
3109.4, So let's do speed run 123. The password was hello world at 123 log in and we have invalid credentials because obviously I made something wrong.
3124.4, So again speed run 123 and the password is hello world at 123 log in and we are logged in again. We can go to protected page return to home log out.
3139.4, You can register for new users. So you see our form is working perfectly guys. Let's for the sake of fun. Try to register with another user. Let's say for instance sonic 123.
3153.4, Again hello world at 123. If I'm going to do any other password and do register will have here the message passwords do not match. That's awesome.
3166.4, The validation checking is working okay. So we can change passwords. We can do hello at 123 only hello at 123 register and we are successfully registered.
3180.4, So now we have created two different accounts for two users. Now if I will go to the admin dashboard.
3188.4, You are authenticated as sonic 123 but are not authorized to access this page. You like to log into a different account because these accounts are not staff accounts.
3198.4, And if I will try to login with the speed run 123 password is hello world at 123 log in again. It will tell me that I don't know who is speed run 123. It's not a staff account.
3215.4," And you can see it here even it's very clear. Please enter the correct user name and password for a staff account. Those accounts that we have created are not specifically staff accounts, which means that speed run 123 and sonic 123 are not admin accounts."
3230.4, They are simple user accounts. Let's log out register. All right. So there you have a guys authentication system in Django and the last chapter in this Django course.
3241.4, We have created together this beautiful registration form with log in and log out functionalities. So once again congratulations on finishing the last part of this Django course. And I will see you in the next project.
