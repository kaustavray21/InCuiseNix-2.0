start,duration,text
0.0,15.36," All right, so let's begin today's lecture."
15.36,2.240000000000002, We have only two lectures left.
17.6,5.719999999999999," This one and next Monday, I realized that there are no more deliverables for this class,"
23.32,1.0, right?
24.32,2.4400000000000013," No more quizzes after tonight, no more presets."
26.76,1.879999999999999, So I do appreciate you coming to these lectures.
28.64,3.8400000000000034, They're intended to be a little bit more fun.
32.480000000000004,3.3999999999999986," No need to take notes, just kind of sit back and enjoy the content."
35.88,5.799999999999997, Today we're going to be talking about library and Python that can help you do plotting.
41.68,3.6400000000000006, And the reason why we talk about this plotting library as opposed to something else that's
45.32,4.479999999999997," maybe more machine learning or something else like that is because at one point or another,"
49.8,5.760000000000005," if you decide to take any other course that kind of builds upon this intro course, you'll"
55.56,4.039999999999999," probably want to create some graphs or visualize something, right?"
59.6,4.240000000000002," Even if you do a Europe, you'll probably have to visualize some sort of data."
63.84,5.840000000000003, And it's a really nice next step to show you how to use a library that already exists.
69.68,4.679999999999993, So somebody already put in the work in creating this library that can plot things for us.
74.36,2.960000000000008, So let's just try to use it.
77.32000000000001,6.0," And so it's just a really, really nice way for us to kind of wrap up the course by showing"
83.32,2.9599999999999937, this visualization library.
86.27999999999999,5.560000000000002, So the library we're going to do to use is called Matplotlib.
91.83999999999999,4.760000000000005, And it's kind of the most basic plotting visualization library that we can have.
96.6,4.079999999999998," And the way that we bring it into our code, just like we have in the past few lectures,"
100.67999999999999,3.1599999999999966, is with this import statement.
103.83999999999999,5.640000000000001," And the actual file that comes into our, that we would bring into our program is called"
109.47999999999999,2.5200000000000102, matplotlib.pyplot.
112.0,1.9599999999999937, Now that's kind of a mouthful.
113.96,8.000000000000014," And a lot of times when we want to use this library, you'd have to basically say matplotlib.pyplot."
121.96000000000001,2.4399999999999977, .function name from that file.
124.4,2.9199999999999875, And so that's a lot of writing and a lot of typing.
127.32,5.280000000000001," So when we bring it into our, when we bring in this library into our own file, we can actually"
132.6,1.240000000000009, rename it.
133.84,7.359999999999985, So as PLT tells Python that now I would like to refer to this file and this library as
141.2,1.8400000000000034, the name PLT.
143.04,6.199999999999989," So if we ever want to call functions or maybe objects and things like that from this file,"
149.23999999999998,2.719999999999999, we would do it using PLT.
151.95999999999998,2.3600000000000136, And then the name of whatever we want to use.
154.32,5.199999999999989, So it's just a much nicer way to grab the contents of the file instead of always writing
159.51999999999998,1.7600000000000193, matplotlib.pyplot.
161.28,1.0, Something else.
162.28,2.0," Yeah, question."
164.28,2.280000000000001, You can think of it as a variable name.
166.56,1.799999999999983, It's anything you want it to be.
168.36,3.3600000000000136," So you can import it, matplotlib.pyplot as Anna."
171.72000000000003,2.6399999999999864," And then from there on, you can say Anna."
174.36,2.5600000000000023, Process name or plot or whatever it is.
176.92000000000002,5.359999999999985, So it's just whatever name you want to get.
182.28,1.0, Okay.
183.28,6.160000000000025, So there are other visualization libraries that exist out there.
189.44000000000003,3.2399999999999807," A lot of them, or all of them, build upon this one."
192.68,3.319999999999993, So this is kind of the most basic library that you can get.
196.0,5.759999999999991, And the other ones that exist build upon it by kind of doing some things behind the scenes
201.76,6.159999999999997," to maybe make your lives easier, or to do some really cool visualizations, or maybe things"
207.92,4.920000000000016, where you can like hover the mouse over a coordinate and things like that.
212.84,2.4799999999999898, But we don't need to do any of that at this time.
215.32,4.920000000000016, It's just nice to take a look at this really basic visualization library.
220.24,4.1200000000000045," So throughout the lecture, we're going to look a little bit at some code."
224.36,6.199999999999989," We're going to run it on the Python file, and we'll just talk about it on the slides."
230.56,7.0," So whenever we're plotting things, we need to tell Python a set of x values and a set"
237.56,1.3200000000000216, of y values.
238.88000000000002,1.0, That's pretty common.
239.88000000000002,5.599999999999994," If you've used matlab, you'll know that that's kind of the way it's done, same, and Python."
245.48000000000002,5.840000000000003," So when we're creating the coordinates that we'd like to plot in a 2D plane, we're essentially"
251.32000000000002,2.319999999999993, just creating two lists.
253.64,1.8400000000000034, We're indexed by index.
255.48,5.159999999999997, We're going to have a list containing all the values that we want for the x coordinate
260.64,5.279999999999973," and in a separate list, all the values that we'd like for the y coordinate."
265.91999999999996,6.520000000000039," So at index 0, in each of these lists, you're basically creating x values at index 0, y values"
272.44,4.399999999999977, at index 0 becomes the one coordinate point.
276.84,5.800000000000011, So one of the very simplest things that we can do is we can create a nice list of values
282.64,2.519999999999982, that will be our x values.
285.15999999999997,5.439999999999998, So our x-axis will basically be the number 0 through 29.
290.59999999999997,8.0," And then down here, we can create four different lists containing four different y-value coordinates."
298.59999999999997,6.560000000000002," So when we're plotting, we're going to plot this x-value list against all these linear points."
305.15999999999997,4.0," This x-value list against all these quadratic points, and this x-value list against the"
309.15999999999997,1.9600000000000364, cubic points and so on.
311.12,6.0, So the way we're creating these lists are pretty familiar Python syntax.
317.12,5.399999999999977," Our n is going through 0 to 29, and then we're appending to the end of each one of these"
322.52,5.400000000000034," lists, linear quadratic cubic and exponential, some function of that."
327.92,3.240000000000009, So the linear list will just have all the values again.
331.16,2.8799999999999955," So we're plotting 0, 0, 1, 1, 2, 2, so on."
334.04,6.079999999999984," The quadratic list will be plotting 0, 0, 1, 1, 2, 4, 3, 9, and so on."
340.12,4.0, So we're going to do the same with the cubic and then this exponential.
344.12,5.0," I just chose randomly 1.5 to the power of n just because it kind of looked nice in the plot,"
349.12,5.0, but you can imagine a different number for the exponential in there.
354.12,7.0, So the way we plot some values is by not surprisingly the plot command.
361.12,6.0, So PLT was how we decided to import that library as the name that we gave it.
367.12,5.0, So the plot tells Python we'd like to plot some list of x and y values.
372.12,5.0, So the parameters to the plot command are going to be two sequences of values.
377.12,6.0," They can be lists typically, but they could also be tuples, they could also be the keys you get from"
383.12,4.0, a dictionary that was also an iterable things like that.
387.12,6.0," So we have to pass in a list of numerical things, so this will be typically the stuff on your x-axis,"
393.12,5.0, and the second parameter is going to be the function of those values of the x-axis.
398.12,2.0," The lists have to be the same length, obviously."
400.12,6.0," So Python knows which coordinates we're plotting if they're not the same length by accident,"
406.12,7.0," then Python will throw an error and then you don't, you know, it just won't plot anything."
413.12,8.0," So when we run the code, Python will generally plot the values in either a new window"
421.12,5.0," or directly in line in the console, so right over here."
426.12,7.0," So right in here, it could put the plot directly sort of in line with a bunch of stuff that you might print."
433.12,4.0," To toggle between that, just out of curiosity, you go to tools, preferences,"
437.12,4.0," ipython console graphics, and then here you can choose either automatic,"
441.12,2.0, which will make a new window for us.
443.12,4.0," That's interactive, you can zoom in and out, things like that, or in line,"
447.12,7.0, which will just put the plot that you tell Python to generate directly in the console here.
454.12,6.0," So I prefer the new window because it's easier for me to interact with it, so we'll do that."
460.12,4.0," So let's actually run one of the plot commands, so plt.plot."
464.12,5.0," We're plotting here the x-axis as just the number 0 through 29,"
469.12,4.0, and the y-axis is just going to also be the value 0 through 29.
473.12,5.0," So we've made a nice little linear plot, and you notice it popped up a little window down here for me,"
478.12,2.0, and this is the plot that it generated.
480.12,4.0," Yay, not surprising, this is exactly what we expected out of it."
484.12,2.0, Right?
486.12,5.0," Okay, so what do we notice about that plot?"
491.12,5.0," We notice how Python nicely fit the line within this frame, right?"
496.12,4.0, So it added a little bit of wiggle room to the left and to the right of my line
500.12,5.0," and to the below and above my line, just so it fits nicely within the frame."
505.12,8.0," It didn't zoom out to some standard 0 to 100 value, it zoomed into this 0 to 30-ish range,"
513.12,2.0, 0 to 30-ish on the y-axis range.
515.12,6.0," So really, really nice that it did all that for us."
521.12,3.0, The order of the points does matter in the list.
524.12,5.0, So you'll notice one of the other things in this plot here is we gave it actual points
529.12,6.0," that it needed to plot, but the plot command doesn't plot the points by default,"
535.12,3.0, instead it just connects all the points by line.
538.12,8.0," So it connects consecutive indices of points by line, so it connected the 0, 0, 1, 1, 2, 2, and so on."
546.12,3.0, So the order of the points does actually matter.
549.12,5.0," If we have a function, for example, in this case n and n squared, right?"
554.12,7.0," So n being 0 to 29 and n squared being 0, 1, 2, 4, 0, 1, 4, 9, and so on."
561.12,7.0," But they're out of order, Python will just take consecutive pairs from those lists"
568.12,3.0, and connect them with a line.
571.12,1.0, So here's an example.
572.12,3.0, I've got my x-values list.
575.12,2.0, It's test samples.
577.12,3.0, It's all the numbers 0 to 29 but out of order.
580.12,5.0," And the test values associated with each one of those, again, they are correct."
585.12,7.0," This is 0 squared, this 25 is 5 squared, this 9 is 3 squared, but they're out of order."
592.12,10.0," So if we run that, just with a pure plot command, we're going to get some garbage plot."
602.12,3.0, Right? Doesn't look very nice.
605.12,3.0," And we already know what's wrong, right?"
608.12,7.0," Python just connected 0, 0, 5, 25, and then, you know, 3, 9 by a line."
615.12,3.0, Not really very nice.
618.12,7.0," Instead, what we'd like to do is to just tell Python to plot the points."
625.12,2.0, So I don't care about connecting them with a line.
627.12,5.0," In this case, I would tell Python instead of just plotting it to create a scatter plot for me."
632.12,9.0, So plt.scatter with the same list of x and y values is going to just create for me this nice plot
641.12,2.0, where it plots the coordinates.
643.12,5.0, Doesn't matter that they're out of order because they just get plotted without anything connecting.
648.12,4.0, Right? It's pretty nice.
652.12,3.0, So that's this example that we just did here.
655.12,5.0," And then this is us doing a scatter plot, giving us this nice plot."
661.12,8.0, Okay. One of the other things that you might want to do is to have a whole bunch of lines being plotted on one window.
669.12,6.0," Right? So to do that, all you have to tell Python is just a sequence of all the commands,"
675.12,5.0," all the plotting commands, or everything that you'd like to plot on the one figure."
680.12,4.0," So without telling Python, you'd like to create a new figure."
684.12,9.0," Anytime it sees a plot command, it will just keep adding whatever points get generated or whatever lines get generated to the current figure that's open."
693.12,3.0, So we just have one thing that's open right now.
696.12,3.0, So it'll just keep adding stuff to our figure.
699.12,3.0, So here I've got four plotting commands in a row.
702.12,4.0, I've never explicitly told Python to create a new figure for me.
706.12,4.0, So it's just going to add all four of these lines to the same plot.
711.12,2.0, So it just doesn't create a new figure.
713.12,2.0, It just keeps adding stuff to my plot.
715.12,6.0," So you can imagine if I added a scatter plot as well, it would just add the individual dots to this plot."
725.12,3.0," Okay. So again, what do we notice?"
728.12,5.0," Well, Python nicely framed everything for me, right?"
733.12,5.0, To make sure that every line that I have fits within this graph.
739.12,3.0, So my x-axis is comfortably between 0 and 30.
742.12,4.0," My y-axis is also comfortably between 0 and 120,000."
746.12,5.0, So there's a little bit of gap up at that top of that exponential line.
751.12,9.0," But this leads us, if we were presented this graph, to kind of mistakenly not know what's going on with these bottom lines here."
760.12,6.0," Right? So this is our linear, the blue line, and the orange one is the quadratic."
766.12,2.0," We're not really sure what's going on down there, right?"
768.12,5.0," Because the scales are just, it's just, the y-scale is just too high."
773.12,8.0," So in this particular case, it would be better to visualize the data in separate different windows, right?"
781.12,12.0," So instead of having everything be plotted in one window, we're going to tell Python to create a new window and plot some stuff in it."
794.12,6.0, So the way we tell Python to create a new window for us is with the command PLT.figure.
800.12,7.0," So as soon as Python sees PLT.figure, it will create a new window, bring it to the foreground,"
807.12,4.0, and any further plotting commands will be added to this new figure.
811.12,6.0," So there's a parameter that this figure can take, and that's going to be the name of the figure."
818.12,5.0," So when you have a window at the top, it has a name for the name of the program or whatever is running."
823.12,6.0," Well, the string that you put in there is going to be the name that you give to that figure."
829.12,6.0," If Python doesn't have a figure with that name already there, it creates a new figure, brings it to the foreground."
835.12,7.0," But if there's a figure with that name already there, and you just happen to call PLT.figure with that same name,"
842.12,7.0, it'll just re-bring that window up to the foreground again to re-add more stuff to it.
851.12,3.0, So we're going to look at this example here.
854.12,3.0, We've got a whole bunch of stuff being plotted.
857.12,7.0," So the first two lines of code here, first we've got a new figure being created, and we called it expo."
865.12,9.0, And then this plot command here coming up right after the figure will add this exponential that we created to that expo figure.
874.12,3.0, Then we've got a PLT.figure right after that.
877.12,10.0," So Python will bring this new figure to the foreground, and the plot command that comes right after that will add the linear this line to this new figure."
888.12,1.0, That we called Lin.
889.12,8.0," A couple more times we're going to create, do the same thing to create this quad and this cube, and those will each get one line added to them."
897.12,8.0," And then down here we're going to say, well, let me just go back to that exponential figure and add another different exponential curve to it."
905.12,8.0, So we're going to create the exponential curve this time 1.6 to the power of i instead of 1.5 to the power of i.
914.12,7.0, Then we're going to tell Python to bring the figure called expo back up to the foreground. So remember we created it up here.
921.12,5.0, So it doesn't create a new figure. It'll just bring that one back up and it already has a curve in it.
926.12,6.0, And then we're going to tell Python to plot a second curve to it.
932.12,5.0, So let's see that.
937.12,5.0, That's all this code right here. Run it.
942.12,12.0," Okay, so not just one figure, one window got created, but four. So this is my cube. And you can see up in the top here a little hard to see, but that's the name that we gave it."
954.12,7.0," This is my quad. This is my Lin, my linear, and this is my exponential."
961.12,14.0," So we see the exponential one was has two lines in it because we added one way at the beginning, and then we brought it back for processing to add another line to it."
975.12,9.0," So again, so this, these graphs are actually on the slide. This is the quad one. This is the cube one. This is the linear one."
984.12,11.0," And this is the exponential one. The blue line was our original curve, 1.5 to the power of X. And the orange one is 1.6 to the power of X. So they both got added to the same block."
995.12,14.0," Cool. So again, just, you know, something to note. You'll see how Python nicely framed our lines so that it's able to fit everything that it needs to plot within this graph."
1009.12,11.0," Okay. So what we're going to do next, I know that was a little bit tedious, but we're going to do next is we're start looking at some real exam, some real world data."
1020.12,9.999999999999886, So first we're going to do some toy real world data. And then soon we're going to start dealing with some actual data sets that we're going to read in.
1030.12,6.0," We're going to plot, we're going to investigate, try to answer some questions about them and things like that."
1036.12,18.0," So first, let's look at this real life example where we've got months and temperatures for each of those months. So notice the months here is actually this, this, this, this, the value that this range returns, which is like an iterable like a tuple."
1054.12,9.0," So it's still a sequence of values. It's not a list, but totally fine to be passed in as, as an argument to the plot committee."
1063.12,13.0," And temps, of course, are going to be temperatures corresponding to each of those months as a list. Okay. So the plot looks something like this, if we actually run that code."
1076.12,10.0," What do we notice? Well, just like before, Matt plot lived nicely framed our data, right? It's got a little bit of wiggle room left and right top and bottom."
1086.12,8.0," So it automatically selected the scales, right? How low to go? How high to go? And the tick marks for this."
1094.12,9.0," But let's say that you, you know, you're the advisor to a student and they came to you with a plot that looked like this."
1103.12,8.0," Would you be able to tell anything about this plot, right, without knowing exactly what the code that generated this plot is?"
1111.12,19.0," Not really, right? It just looks like a bump. It could be any sort of data. So what we'd like to do before actually, you know, for your ups and things like that in the future, before presenting a plot to somebody else, you'll want to add a title and you'll want to label your axes, right?"
1130.12,12.0, So what we want to do in addition to actually plotting the data is to tell Python to add for us a title and labels for our axes.
1142.12,8.0," So we do this using these three lines of code here. So since it's, we haven't told Python to create a new figure or anything like that."
1150.12,15.0," So anything, any commands that we do with regards to plotting will just get added onto this figure. So here I've got Python adding this title, these two labels to our axes, to our axes."
1165.12,10.0," So here I've got this and this plot. So I run it and tada. We have something that looks much nicer, right?"
1175.12,7.0, So now we can hand this plot to somebody and they'll know what it's about.
1182.12,13.0," Now that's fine, but since it's temperatures, what I'd really like to do is to say, well, the temperature, the lowest temperature I have should really start at the y axis here, this intersect with the y axis."
1195.12,10.0," And the highest temperature I've got, I don't really want that wiggle room because this is my last temperature value. Let's just have the frame just end there."
1205.12,13.0, So we can do that little change by setting limits on our x axis. So here I'm going to limit the x axis to say that it starts from 1 and ends at 12.
1218.12,9.0," So if I do that, again, that's just a little command we put in continuation with the rest of the commands and it gets applied to this plot."
1227.12,11.0," So as soon as I do that, Python now creates for me the same plot except that the y axis starts at 1 and ends at 12 nicely framed within here. So no more wiggle room."
1239.12,17.0," Okay, still some improvements to be made to this plot as in here the months skip, right? So Python decided that it's, you know, it's best to just show two, four, six, eight, 10, 12 as the ticks on the x axis."
1256.12,10.0," But I decide that I would since I'm, you know, decide since I'm showing all the months of the year and their temperatures, I would really like to have ticks for every single month."
1266.12,14.0," So again, a little command will do that for us. So plt.x ticks takes in a tuple of all of the places where you'd like one of those little ticks to be created."
1281.12,12.0," So if we do that, again, just another little command in, in series here. If we do that, Python now fills in the ticks for every single spot that we told it to fill it."
1293.12,5.0," So it's looking way better already, right?"
1299.12,12.0, But still not quite right. I promise this will be the last improvement we make. I personally find it hard to map numbers to the months. I still count my fingers.
1311.12,14.0," So what would be nice is to say, well, instead of having numbers on my x axis, I would like to have the actual names of my months, right? Jan, Feb, Mar, and so on."
1325.12,15.0," So to do that, we're going to make one small change to our x ticks command here. We're going to give it a second parameter. So first one is, of course, what we had before saying these are all the ticks that I would like to have."
1340.12,10.0," And the second parameter is the labels for each one of those ticks. So one by one, they'll be mapped. So one will be mapped to Jan, two will be mapped to Feb, and so on."
1350.12,12.0," Instead of using the numerical values, Python will create for us the string values that I've told it to do. So here it is, run."
1362.12,11.0," Creates for me this nice, very nice looking plot. So this, I would be happy to receive as an advisor compared to that very first one that we had."
1373.12,7.0," All right, questions so far. Let me see them all right. Okay."
1380.12,8.0," Okay, the other thing that you can do is potentially add grid lines if you wanted to. So PLT dot grid will either toggle the grid lines on and off."
1388.12,7.0," So if there's already grid grid lines, it'll toggle them off when it sees that command. If there are now grid lines, it'll toggle them on."
1395.12,5.0, So you could potentially have a bunch of PLT dot grid commands that keep toggling things on and off.
1400.12,10.0," Okay, so that was us plotting one one, one city's temperature values for a year."
1410.12,6.0, Let's say an average. Let's say that we wanted to plot two different cities.
1416.12,12.0," The code to do that is as follows. So again, we've got months being this range one through 12 inclusive. I've got a list of all the Boston temperatures here. I plot that. I list of all the Phoenix temperatures here."
1428.12,9.0," And I plot that. And of course, I'm going to add some labels to my to my graph."
1437.12,7.0, So if I run that.
1444.12,10.0," We get something that looks like this. Now, of course, I could kind of remove that little, those little wiggle rooms on the left and right, but for now it's fine."
1454.12,9.0, What's missing from this plot? Let's say you didn't see the code and you were just given this plot.
1463.12,10.0," Yeah, exactly. I don't know what, like, yes, these are different temperatures from the title and the labels, but you don't know which city is which exactly."
1473.12,7.0, So what we'd like to do is tell Python how to label these two lines. Right.
1480.12,12.0," So to do that, it's just an extra parameter here in the plot command. So when you tell it which data to plot, you can also tell it what label that data should get."
1492.12,9.0," So here I've got Boston label for the first one, Phoenix label for the second one. And then you tell Python to add a legend to your plot."
1501.12,9.0," So here the parameter is the location for the legend. And best just means Python should decide where to put the legend, top left, top right, middle, wherever."
1510.12,11.0, So it doesn't really interfere much with the data or you can just tell it where to put that legend. Right. So you can force the legend to be in a particular spot.
1521.12,10.0," So here I've got already labeled data and then we add the legend. And now you can see in this particular case, it decided to put it in the top right. But again, you could force it to go somewhere else."
1531.12,12.0, Bottom middle seemed like a fine choice as well. Okay. Very nice. So now we've got Python.
1543.12,14.0," You know, it automatically did the X and Y axes for us as we told it to do, but the colors that it picked were random. Now we can specify a bunch of different details for the plot."
1557.12,12.0, So we're going to do that next just to show you that you can. So we're going to choose different colors and different styles for our plots. We're going to choose different widths for our lines.
1569.12,17.0," And then maybe we can and then we'll also add some markers. So where exactly each data point we have we're going to mark. And then I'll show you how you can create subplots. So instead of creating new windows, you can actually have one window with different little subplots with it."
1586.12,10.0, Okay. So the first thing we're going to see is how to customize the data to have a certain line style and a certain color.
1596.12,12.0, So there's a shorthand notation to do this instead of actually passing in the parameter name in the plot command. We could do it shorthand notation. So you might have already noticed this little extra bit here.
1608.12,15.0," So more you use it the more you'll get used to it. But this basically tells Python that I would like this plot, this line corresponding to this data to be blue. That's what the B stands for and to be a solid line."
1623.12,10.0, Okay. That's what that little dash means. The Phoenix one you may have guessed tells Python that I would like this one to be red or for red and to be a dashed line.
1633.12,10.0," And then the last one I'm going to add one more temperature here, temperature data for Minneapolis. I would like this one to be green and a dash dot dash dot line."
1643.12,12.0, Okay. So we can run that.
1655.12,3.0, And it looks something like this.
1658.12,10.0," All right. So if you got my solid blue line for Boston, my dashed line for Phoenix and my dashed out dashed out line for Minneapolis."
1668.12,13.0," Very nice. Now, instead of doing that shorthand notation where we've got this one parameter that just somehow magically knows the color and the style based on just being past."
1681.12,11.0, We can actually tell Python the parameter values that it should that correspond to the color. So here I've got color equals B for blue.
1692.12,8.0, And then the correspond to the line style. So here line style equals and then you explicitly pass in the the line style that you'd like.
1700.12,9.0, So this may be more more intuitive according to what we've learned. But Python does allow you the option to kind of do it all in one.
1709.12,8.0," So if we do if we run it with this with these specific explicit parameters, then we'll get the exact same graph as before."
1717.12,10.0," So there's a lot of options that we can have here. So these are all the line style options. So you can also add a dotted line, which I didn't show."
1727.12,9.0, These are all the color options plus many more. You could also pass in the RGB values or maybe the hex values if you want a very specific shade of magenta or something.
1736.12,8.0," And then we can also add markers to our to our lines. We haven't seen this yet, but let's do that next."
1744.12,15.0, So let's say that I would like to have the actual data points that I've that I've plotted show up in my lines right now the lines just get connected or so the data points just get connected with our lines dashed or dotted or whatever we chose.
1759.12,14.0," But the marker the data points themselves don't show up with markers. So again, in short, had notation, we can tell Python, hey, let's add these markers. So here I'm telling Python to just do a dot for this blue solid line."
1773.12,12.0," Here, I'm telling Python to do a larger dot for this red dash line. And here, I'm telling it to do a star for the green dash dash dot line."
1785.12,10.0," So that's down here. Run it. And now we see nice little markers for every one of our data points, right."
1795.12,10.0, So we can also do triangles. We could do squares. There's lots of other marker options and there all exist in the documentation for matplotlib.
1805.12,18.0," So this is what we got perfect. The last thing that we can do is to add thickness to our lines. So oftentimes it's good to first of all, dealing eight the lines using dashes or dots and things like that, but also with."
1823.12,10.0, So here another parameter passed in the line with this is going to be a skinny line. This is going to be maybe a thicker line and this one's going to be unreasonably thick.
1833.12,8.0, So let's see exactly what this will look like. It's going to look super weird.
1841.12,18.0," Yeah. As I said, unreasonably thick line, but there it is. And then you can see that the legend itself also adjusted to whatever you chose for your line stats."
1859.12,5.0," Okay. So yeah, that's exactly what I said."
1864.12,15.0," Cool. Last thing I want to talk about is subplots. So right now, the only things that we've kind of learned about plotting is you either plot every line that you have on one figure or you create a new figure."
1879.12,8.0, And then it becomes a new window that you have to kind of switch between for whatever you'd like to plot.
1887.12,11.0, Oftentimes what's really nice to do is to create only one figure. So you have one one only one thing that pops up right like one window.
1898.12,15.0," And within that window with some name here, right. And within that window, you can create a bunch of different subplots. Right. So here I've created six different subplots."
1913.12,17.0," So we can tell that to Python and we do that using the subplot command. So in this particular case, I've told Python to create for me a subplot with two rows. That's what the first parameter says and one column."
1930.12,6.0," That's what the second parameter says. So here, this is one window with two positions in it."
1936.12,9.0, The third parameter tells Python which one of these positions to open for adding lines to or data to. Right.
1945.12,5.0, So one means this is the one that you're opening and two means this is the second one that you're opening.
1950.12,10.0, So you can see here the very top subplot command tells Python to open up this one for editing basically.
1960.12,10.0, So we're going to add to it the Boston temperature. So this is all the plotting commands and all the labels and everything after it belong to this top subplot here.
1970.12,16.0," And then subplot command down here tells Python that on this figure with two rows and one column, I would like to now open position number two for editing and then everything that I have thereafter gets added to the subplot at this position."
1986.12,15.0, So the way that this is going to look is as follows. So I've got these. This is just one window that gets created and you can see the top one has the Boston temperature and the bottom one has the Phoenix temperature.
2001.12,12.0," At first glance, does this look right in terms of temperatures? Like if you're just to look at the pictures themselves."
2014.12,12.0," I don't know about you, but I at first glance, I thought that the temperatures for Boston and Phoenix were the same because I didn't look closely at the y-axis."
2026.12,7.0," Right. It kind of looked like, hey, they both bottom out in the same way. They both top out in the same way. So they look very similar to me."
2033.12,12.0," But if we inspect the y-axis closer, we see that the Boston temperature starts at 30 goes to 70, but the Phoenix one starts at, you know, what is this 50 and goes to 90."
2045.12,15.0," So if we're presenting plots in one figure, what would be really nice to do is to make sure that the axes are both bounded in a similar way, especially if we're plotting similar data, right, temperature in this particular case."
2060.12,12.0," So in our code, what we'd also like to do is set limits on our axes and just the y-axis because the x-axis is the same, right."
2072.12,8.0," So here I can limit the y-axis from 0 to 100, the reasonable set of temperatures in Fahrenheit, right."
2080.12,8.0," So if I fix these temperature limits from 0 to 100, and now I plot, I get something that looks like this."
2088.12,4.0," And now at first glance, this makes a lot more sense to me, right."
2092.12,10.0," I've got the Phoenix temperatures, you know, seem to be for this year, on average, higher than the Boston temperatures."
2102.12,18.0," Okay. So we can plot now multiple, we can create multiple subplots. So here, you know, in the previous example, I just had two top and bottom, but I can create as many subplots as I'd like within my window."
2120.12,13.0," So when I create them, and I tell Python how many rows and columns I have, in this particular example I just drew here, I have three rows, right, and two columns."
2133.12,8.0, So the third parameter that I pass in will basically tell Python which one of these subplots to open up for processing.
2141.12,7.0," So this will be the first one, this will be the second one, kind of the way we read, third, fourth, fifth, and sixth."
2148.12,11.0," So that third parameter to these subplot commands will be either one, two, three, four, five, or six, telling Python which one of these sections I'm going to add plots to."
2159.12,7.0," In this particular case, I had a Boston Phoenix in Minneapolis temperature, so I'm just creating a two by two matrix."
2166.12,6.0," Right. So here I just have this thing that looks like this, a figure with these four subplots."
2172.12,10.0," And I am going to add the Boston one over here, the Phoenix one over here, and then the Minneapolis down here."
2182.12,10.0," So one, two, and three as my subplot, that subplots that I'm opening, nothing in four, so that fourth spot will just be empty."
2192.12,5.0," So the plots will look something like this, and I haven't changed the line widths in this particular case."
2197.12,16.0," I didn't need to write, and you can see everything's plotted with the heights, again, limited from zero to 100, just so everything's comparable, and notice the empty spot here, because I had nothing to fill in."
2213.12,4.0, Questions about this? This interesting?
2218.12,14.0," Okay. All right. So that finishes up just some really basic things that we can do with plotting, basic customizations."
2232.12,12.0," Now what I'd like to do is just open up a few different data sets. For processing, we can start by just plotting the pure values on a regular plot,"
2244.12,8.0," and then we can start to investigate things that we visualize, ask more questions, and see where we go from there."
2252.12,12.0, So the first thing I'd like to do is open up a file on the US population. So this particular file contains 40 different numbers.
2264.12,19.0," So it has a population value over about 400 years, every 10 years. So that's 40 different values for the temperatures, starting from a really long time ago until about 2010 or something like that."
2283.12,16.0," So the file looks something like this, so it starts at 1610 and goes down to 2010. So this is 40 lines for 40 years, 40, 400 years, every 10 years."
2299.12,11.0," Then there's a space in the file, and then I've got the population value. Okay. So it starts at 350 increases, goes down to 300,000 in 20 times."
2310.12,12.0, So that's what the file looks like. It's important to know what the file looks like because you're going to have to read in this data and save it in some sort of data structure that's easy to manipulate.
2322.12,8.0," So in our case, a data structure that's really easy to manipulate where you have a whole sequence of values is a list."
2330.12,12.0," So what we can do is we can open up this file for processing, read in the years as a list, and then read in the population values as a list as well."
2342.12,6.0," We could use a dictionary also if we wanted to, but in this case I just used two lists."
2348.12,16.0," So let's look at the code to do that. It looks like a lot, but I'll kind of go through it. So here is the function that's going to read in the file. It just opens up the file, creates two empty lists, one contain, will contain the dates, the other one contain the populations."
2364.12,10.0," It iterates through each line in the file. So I've put up what a line in the file kind of looks like up here. So it's got some numbers space, some other number."
2374.12,8.0," But when we read in file, when we read in a line from a file, Python actually reads it as a string."
2382.12,12.0," So what that means for us is we're going to have to take this string, each line being the string, you know, 1, 6, 4, 0 space, 2, 6, 6, 3, 4, something like that."
2394.12,11.0, And somehow separate it so that we have the date and then the number of the population and then somehow save those two pieces to list.
2405.12,11.0, So the first thing to notice is that we have a pesky comma in our population values.
2416.12,10.0," Those values are human readable, so it makes it easy for us to read, but the computer is not so happy about them."
2426.12,10.0," So if I have a number like 11,345, whatever, this is read in as a string."
2436.12,10.0," And if I just try to cast that as an integer, just straight without doing any sort of processing on it, Python's very unhappy."
2446.12,17.0," So what we need to do is remove that comma, because as long as I don't have a comma there, Python can convert that string number into a regular integer number for us to then plot."
2463.12,7.0," Okay, so that's what this bit of the code is doing. It's doing it in kind of a weird, weird way."
2470.12,10.0," It's saying, hey, take this entire line of characters and only keep characters that are either a digit or a space."
2480.12,12.0," So in doing so it effectively removes the comma, because it creates a new version of that line containing only digits and spaces, so it'll just take the 2, 6, and then the 6, 3, 4 right after."
2492.12,4.0, So it just creates this new line that looks like that.
2496.12,15.0," And then after it has this new line, we're going to split on the space, because we note that every single, after every date, every year, we've got a space that separates our population value and our date."
2511.12,13.0," So if we split on the space using the split command, the thing before the space, so the line at index zero gives us the date, we'll just cast that to an int and append it to dates."
2524.12,12.0," And then the line at index one is the thing after the space, again without the comma, because we did that trick, and then we cast that to an integer and append that to our population's value."
2536.12,2.0, Okay?
2538.12,3.0," So that's what we do there, and that's what we do there."
2541.12,11.0," And then from there on out, we just return the dates and the populations, the dates become my x values for my plot and the populations become the y values for my plot."
2552.12,5.0, Okay. And then we plot it and it looks something like this.
2557.12,12.0," So much easier to read or to tell what's going on than just looking at pure numbers, right? Always nicer to visualize things than to just read a whole bunch of numbers, even if it's just 40."
2569.12,10.0," And in fact, we can tell a couple of things that we weren't able to tell, you know, we could definitely couldn't have been able to tell from just looking at pure numbers."
2579.12,11.0," The first is that we notice a little bump right here, right? In the population. This is the impact of World War II on the population."
2590.12,7.0," Second, a little harder to tell is another little bump down here, and that's the impact of the Civil War in the population."
2597.12,5.0, Okay? So nicer to visualize it exposes some interesting things.
2602.12,10.0," The other thing to notice is, well, what's going on down here? It kind of looks like the population is not really growing much, right?"
2612.12,10.0," And then maybe from 1750 onward, it starts to grow exponentially. It's hard to tell what exactly is going on in that lower part."
2622.12,14.0," So let's think about a different way of showing this data instead of having a linear scale on our y-axis. Let's see about doing it in a logarithmic scale, right?"
2636.12,9.0, So we're going to add a command that tells Python to make our y-axis a logarithmic scale instead of linear.
2646.12,13.0," So if we do that, then that means that every regular increment on our y-axis is going to imply an exponential increase in the population."
2660.12,8.0," Okay, so let's plot that. And if we plot that, we get something that looks like this."
2668.12,9.0," The x-axis remains unchanged. We're still incrementing the years linearly, right? But the y-axis is now logarithmic."
2678.12,10.0," So what do we notice? Well, I see linear line here, and I see another line here."
2692.12,6.0," Again, linear growth on a log scale means exponential growth, right, on a linear scale."
2699.12,13.0," So what we notice is that there's sort of these two time periods of exponential growth. And in fact, those early years actually seem to be growing, the population seems to be growing at a faster rate than the later years."
2713.12,5.0, And that was not readily visible on the previous graph that we have.
2718.12,9.0," So the question, you know, I have a question for you, which one of those did you find more informative? Well, it kind of depends on what we're interested in finding out, right?"
2727.12,12.0," If we're interested in sort of big trends in the data, where, you know, in the top left one, we spotted here the impacts of wars on the population. Well, then the top left one is the one to look at."
2739.12,9.0," But if we visualize the data in a slightly different way, it gives us different insights into what's happened to the population, right? That wasn't as apparent in the previous graph."
2748.12,10.0," So it really kind of just depends on what you're interested in finding out, which one of these plots you find more informative."
2758.12,7.0," And, you know, sometimes both are probably necessary to figure out exactly what happened."
2765.12,6.0, Okay. So that finishes our example on the US population.
2771.12,9.0," Now, let's look at a slightly different file. This particular file, we're going to look at country populations."
2780.12,16.0," So these are the populations in a whole bunch of different countries, or sorry, all the countries, ordered from countries with the highest population up at the top of the file down to the countries with the lowest population at the bottom of the file."
2796.12,5.0," So they're basically ranked in this order, right? So I know that this order is correct."
2801.12,5.0," So there's, you know, 237 lines in this file."
2806.12,5.0, What do we notice about the data? So we need to know what the data looks like in order to read the file in.
2811.12,6.0," And again, we're going to be interested in kind of extracting certain parts of it."
2817.12,7.0," For the particular analysis, I'm going to do next. I'm actually only interested in the population itself."
2824.12,6.0," So I don't care about the rank, and I don't actually care about the country either."
2830.12,8.0," So all that might, the code that's going to read in the file will only be interested in extracting the population value."
2838.12,6.0," And notice, once again, we've got our commas here in the population values, right?"
2844.12,11.0," So we're going to use the same trick to get rid of those. Again, nice human readable format here, but not so good for reading in the file and dealing with the data itself."
2855.12,4.0, So we're going to have to take care of that when we read in.
2859.12,6.0, So here's the function that reads in the file. It's going to have a very similar feel to the previous one.
2865.12,6.0," Again, I've got a little sample of our file up here just to remind ourselves what it looks like."
2871.12,8.0," So this particular file, I'm only interested in grabbing the population value, and it's actually a tab separated file."
2879.12,7.0," So I've got rank, tab, country, tab, population, tab, and then the date."
2886.12,8.0," So when I take a line of code, what I'm first going to do is split it on the tab character."
2894.12,4.0, And the tab character is this backslash teething.
2898.12,5.0," So once I split it on the tab character, the thing at index zero is by rank."
2903.12,4.0," The thing at index one is my country, and the thing at index two is my population."
2907.12,3.0, The thing at index three is my date.
2910.12,9.0," So if I'm only interested in grabbing the population, I'm going to look at the thing at index two, and this gives me the population as a string here."
2920.12,5.0, And then we do the exact same trick as before to eliminate the comma.
2925.12,2.0," There's no space in this particular case, right?"
2927.12,5.0, Because I've just got the number saved because of my tab split.
2932.12,3.0, So all I need to do is keep digits.
2935.12,5.0," And then if I keep the digits, then I'm just going to keep that number as a population."
2940.12,6.0," Again, I cast it to an integer because I would like to work with numbers in my lists as opposed to strings."
2946.12,2.0, That would be very weird.
2948.12,8.0," And at the end of this function, I've got all of the populations in the same order that they were in that file, read in as a list."
2956.12,3.0," Right? Numbers, not strips."
2959.12,13.0," And so if we plot the populations, just pure populations, I'm going to have something like this."
2972.12,5.0," Right? If I plot just the pure populations, I see something that looks like this."
2977.12,6.0," Kind of hard to tell. I mean, it's a big exponential decrease, but is that really what it is?"
2983.12,9.0," So again, we'll do a little semi-log plot on the y-axis to see exactly if there's any sort of linear action going on on that log plot."
2992.12,5.0," And, you know, unsurprisingly, you know, it kind of matches our intuition."
2997.12,4.0, There are very few countries that have a really high population.
3001.12,4.0, There are very few countries that have a low population.
3005.12,7.0, And then a bunch of countries that are kind of in the middle here where the population just exponentially decreases.
3012.12,3.0, Okay.
3016.12,7.0, But that's not the analysis I would like to do on this data.
3023.12,2.0, Because that's kind of boring.
3025.12,9.0," So instead, what we're going to analyze is actually just the first digits from every country's population."
3034.12,1.0, Right?
3035.12,7.0," So what I'd like to do from that data set is once I've grabbed a list of all of the country populations,"
3042.12,4.0, I am going to extract that first digit.
3046.12,10.0," So the way we do it is, you know, if we have a population, I don't know, to five, four, two, one, three, six, whatever."
3056.12,4.0," I'm going to take this number, cast it to a string."
3060.12,3.0," That's what this one line of code is doing, all in one."
3063.12,5.0," It's cast it to a string, extracts the element at index zero."
3068.12,5.0," This becomes the string two, and then we cast that to an integer."
3073.12,1.0, Right?
3074.12,3.0, To give us two.
3077.12,3.0, So that line of code does all of those steps in order.
3080.12,9.0," So at the end of this loop, I've got this first digits list that contains all of the first digits of every single one of those country populations."
3089.12,6.0, So I'll print that for you just to give you a sense of what it looks like.
3095.12,2.0, So we see this.
3097.12,8.0," Right? So we had two countries up at the top that had one billion people, one billion people, then the next country down,"
3105.12,5.0," had 300 million people, then 200 million, then 200 million, then 200 million, then 100 million, and so on."
3110.12,1.0, Right?
3111.12,6.0," So just extracting that first digit, we see this kind of, this pattern of values."
3118.12,6.0," Okay? So if we plot that, but that's exactly what we do down here, and I'll just do it in the slides."
3124.12,7.0," If we plot that list in that order, we get a plot that looks something like this."
3131.12,4.0, Right? It's a nice little sawtooth pattern.
3135.12,10.0," Right? And if we stare at it a bit, it makes sense, because the numbers that we got, right, from the file, were already in ranked order."
3145.12,3.0, Highest population to the lowest population.
3148.12,12.0," So here, down here, we had, sorry, down here, this little dot right here had two countries that were one billion, so one one,"
3160.12,11.0," and then had one country that had 300 million, and then it had three countries that had 200 million, then a bunch of countries that had, you know, 100 million something, so one, one, one, one, one, one."
3171.12,15.0," And then, since we're going in decreasing order in terms of rank, right, once we've finished going to that significant digit, when we move down, then we're going to start looking at countries that have, you know, 90 million, 90 million, 90 million, 80 million, 80 million, 80 million, and so on."
3186.12,8.0," So just the order of all of these values, the first digits of every one of these values, it makes sense to have that sawtooth pattern, right?"
3194.12,7.0," We basically have, you know, 9876-543-219, 9876-543-219, and so on."
3201.12,5.0, Right? So we get this pattern.
3206.12,9.0," What I'd like to do is ask how many countries have their first digit, a one."
3215.12,7.0," It seems like there's a lot, right? If we count sort of how many of these countries are down here, it seems to be a lot."
3222.12,6.0," How many countries have a first digit of two? So again, we count how many countries are on this step of my sawtooth."
3228.12,4.0," How many countries have the first digit three, and so on?"
3232.12,8.0," And it kind of looks like, I don't know, maybe there are more countries that have a first digit of one, then there are countries that have a first digit of nine."
3241.12,5.0," Right? There's only a couple here, maybe like five here, maybe one here, a couple here, a couple here."
3246.12,4.0, Whereas the number of countries that have a one are actually a lot.
3250.12,4.0," So let's try to plot this data, the values here."
3254.12,4.0, So what I'm interested in doing is creating a histogram.
3258.12,5.0, So a histogram on the x-axis has a bunch of bins.
3264.12,9.0," In this particular case, the way I'd like to bin my data is by saying my bins are going to be the digits, one, two, three, four, five, six, seven, eight, and nine."
3273.12,10.0," That's the x-axis, and the y-axis is going to be a count, right? A frequency of how many of my countries have the number one as their first digit?"
3283.12,4.0," How many countries have the number two as my first digit, and so on?"
3287.12,11.0," So in terms of this list containing all of the first digits in the countries, I essentially have one bin that counts how many ones I have in this list."
3298.12,8.0," Another bin that counts how many twos I have in this list. Another bin that counts how many threes I have in this list, and so on."
3306.12,6.0," Okay. So if I plot that histogram, it looks like this."
3312.12,10.0," Now, I would have expected this histogram to be about even, right? Like, why does it matter the first digit?"
3322.12,15.0," It seems like in this particular case, the first digit has a higher probability of being a one than being a nine, but intuitively, I would have expected every digit to come out with equal probability, right? 11%, right? 1 over 9."
3337.12,9.0," But instead, what we get is this really surprising result, which is that the first digit seems to be about 30%."
3346.12,12.0, Right? To have the first digit of one seems to be about 30%. To have the first digit being a two seems to be about 18% or something percent.
3358.12,12.0, And so on and so on. And then the first digit being a nine is pretty low. It's going to be about what is this? 12 out of 200 countries. Right? So pretty low probability.
3370.12,9.0," So as it turns out, this graph actually follows something called Benford's law. And this is a well proven law."
3379.12,10.0," It applies to a bunch of different data sets that we find in nature. Data sets that don't really have upper or lower bounds, right? Like country populations, right?"
3389.12,16.0," So Benford's law effectively says the probability of the first digit in some set of some big set of numbers, being a one, a two, a three, whatever, this D being the one, a two, a three, or whatever, is according to this formula."
3405.12,10.0," So if we find the probability of that first digit being a one, we basically find log base 10 of two, which is about 0.28."
3415.12,7.0," Probability of that first digit being a two is log base 10 of one and a half, which is about 0.17."
3423.12,13.0," So our data, the country populations, right? If we look at just the first digit of our data, it also follows this law. Just pretty neat, right?"
3436.12,21.0," So a lot of data that we deal with on a daily basis follows this law. A number of social media followers, a number of post people make stock values, grocery prices, sports statistics, building heights, income taxes, things like that. All follow this law, which is pretty cool."
3458.12,19.0," As of aside, one of the ways that people figure out tax fraud on income taxes is by applying Benford's law to income taxes submitted. People when they kind of submit fraudulent numbers, they tend to make every number kind of come up with an equal probability."
3478.12,14.0, They forget about Benford's law. And so they run this Benford's law on potentially fraudulent tax submissions and they figure out that whatever those people submitted don't actually follow this law and hence it's fraudulent.
3492.12,7.0," So if you're making up numbers, just remember Benford's law."
3500.12,11.0," So yeah, that's a really interesting thing that can come out of some data and again we got to visualize it and see the law in action."
3511.12,16.0," Okay, one last example I want to go through. This one will have to, will kind of show a bunch of different things. It's going to have a lot of code. I'm just going to briefly talk about it, but the code is in the slides or sorry in the Python file if you want to look at it more in depth."
3528.12,8.0," I'm going to compare city temperatures again, but we're going to do a more in depth analysis dealing with a whole bunch more data."
3536.12,10.0," So this particular data set, I've got daily temperatures for 55 years for 21 different cities."
3546.12,12.0, So the amount of data that I have here is going to be 365 times 55 times 21. So that's how many rows would exist in my data set.
3558.12,12.0, So that's a lot of numbers to look at manually. So instead we're going to rely on kind of aggregating it with averages and things like that to kind of make sense of all of this data.
3570.12,13.0," So this is what the file would look like. I've got three columns effectively separated by commas. So the first one corresponds to the city, second one corresponds to the temperature in Celsius."
3583.12,12.0," And the third one is the date that it was taken. So it's nicely in order. The date is delineated like this. So it's got year, year, year, year month, month, day, day."
3595.12,19.0," So this is 1961 January 4th. That's how we would read that. So later when we're trying to think about what, which one of grabbing particular temperatures for a specific year or things like that, then we can use the format, keep the format in mind and use that to extract the relevant information."
3614.12,12.0, Okay. So the first thing we want to do is to grab this data and save it again in a nice data structure that allows us to manipulate it her heart's content. That is a list.
3626.12,14.0," So we're going to open up our file for reading. I'm creating two lists here, one for the temperatures, the other one for the dates. I'm going to loop through each line in my file and I know it's comma separated. So I'm going to split it on the comma."
3640.12,9.0, The thing at index zero will be my date with will be my city. The thing at index one will be my temperature value. The thing at index two will be my date.
3649.12,8.0," I would like to take the temperature value and save it as a number because you know, I want to plot these numbers."
3657.12,10.0, So this specific function will get a list of all of the temperatures for a particular city. So the city here is going to be a parameter.
3667.12,14.0," So as I'm reading the file, I would only like to grab the lines that match that city. So here I've got this if statement. So I'm only going to do this stuff inside this if statement if the city is matching the one I'm interested in."
3681.12,19.0," And then what do we do? Well, we're going to take our temperature value, which is the thing at index one, right? Because I split on the commas. Convert it to a float. There's no commas or anything weird like that in that number. So it's just a pure float, zero point five, five as a string. If we cast it to a float, Python will happily do that for us."
3700.12,15.0," Then we're going to run a Celsius to Fahrenheit function, throw back to lecture one to convert that Celsius to a Fahrenheit value. And then we're going to append all of these temperatures in a nice list."
3715.12,11.0," And at the end of the function, we're going to return all the temperatures. So it's going to be 365 times 55. Right? That's how many temperature values we have for one city."
3726.12,22.0," And what we'd like to do as a first step is to just get a sense of the average temperatures for each one of these different cities. Right? So over every single data point that we have for a particular city, what is the average temperature over all these days for all of these years. So I would like one number to represent the temperature per city."
3748.12,14.0," So that's what this code is doing. It's going to first get all of the cities that are in my file, so all the unique values. Then it's going to get the average temperature over all of those 365 times 55 years."
3762.12,15.0, Then it's going to grab the name of my city as just the first two characters. And then it's going to create a nice scatter plot. So I don't want to link all of these city values together. I would just like them to be dots in my plot.
3778.12,17.0," If we do that, we get something that looks like this. So this point here represents the temperature in Seattle over every day over 55 years. So one point temperature point that represents the Seattle temperature. Right? For all of this data that I've got."
3795.12,14.0," What does this tell us? Well, not much that we didn't already know. I've got these cities down here that are super cold. And those cities up there that are super warm. Right?"
3809.12,8.0," And then all the rest of my cities are somewhere in the middle on average. Right? So nothing that we didn't really know, nothing groundbreaking here."
3818.12,18.0, What would be a nicer thing to look at is the temperature change over time. Right? So here my one data point tells me the temperature kind of that represents that city. But what I'd like to do is grab the temperature that represents that city for each year.
3836.12,14.0," So for each year, I would like to get the average temperature for that year. And maybe I could see a trend, you know, for the temperatures getting warmer over time or cooling over time, or something like, or not having any change at all."
3850.12,9.0, So this is the code that does that. I've got get temperatures by year for city. This is the function that gets run and it calls the one at the top.
3859.12,10.0, So here I've got the code from the previous slide. It gets a list of all the temperatures for a particular city. So over all those 55 years.
3869.12,11.0," And then I'm interested in all of these different years. So for each one of these years, I'm going to get a temperature value. Right? This gets temps for years, the function up there."
3880.12,9.0, And all it does is it looks at that third column and grabs the year. It matches those first four characters of the year entry.
3889.12,10.0," All right. And as long as it matches that year, then it's going to get added to this running sum. And at the end, I'm going to get the average for the year."
3900.12,12.0, And let's say that I'm going to compare four different cities. So I've got 55 values for each city representing the average temperature in those 55 years.
3912.12,8.0, And I've got four cities to compare. So this is what one plot would look like for Boston. Sorry. So this is what the plot would look like.
3920.12,10.0," I've got one line for Boston. That's the blue one line for San Diego, the red one line for Phoenix, the orange and one line for Miami, the green."
3930.12,9.0," What do we see? Well, yes, Boston on average is a lot colder than any of the three other cities. Cool. We do that."
3939.12,9.0, Miami and Phoenix are nicely hot there. I'd like to be there right now. And what about trends? Right? This is why we did this analysis.
3948.12,10.0," What do we see from the trends here? Well, the Boston temperature may be increases a little bit slightly over time. San Diego seems to say about study."
3958.12,12.0," The Phoenix one seems to increase, right? Pretty dramatically as time has gone by on average. And the Miami one may be also slightly increased."
3970.12,17.0," So this only tells us average temperatures. So one thing that we can do is check out the extremes, right? In addition to plotting the average, let's also plot the minimum for Boston and the maximum for Boston."
3987.12,12.0, And see exactly how close that average is is the average in the middle and then the minimum and maximum are super far away from the average. Or are they all pretty much close to the average.
3999.12,17.0," So this is the code that does that. The function here is exactly the same as on the previous slide. The only difference is instead of returning the average, we're also going to grab the max and the min for that list of temperatures."
4016.12,27.0," And then we've got all of the different cities to plot this for. So we get something that looks like this. Again, at first glance, I have, I tend to ignore the y-axis at first glance. So at first glance, again, it looks like, hey, the minimums are pretty much the same, the maximums are pretty much the same, averages are pretty much the same."
4043.12,20.0," So misleading to think about that. So once again, let's help the reader and set limits on our y-axis. So here I've got a limit to my function or to my code. It's going to have every one of my graphs started zero and top out at 100."
4063.12,15.0," And now the plots are nicely comparable. So now I'm plotting the average temperature for each year. So there's 55 of these data points, the minimum temperature for each year and the maximum temperature for each year. So 55 data points being planned."
4078.12,12.0," What can we tell a lot easier to infer information from this, right? So we could see that the average temperature in Boston is the minimum temperature in Miami and San Diego."
4090.12,16.0," What else can we see? The variation in Boston is pretty high, right? The variation in Miami and San Diego is a lot lower, right? San Diego goes from 40 to 80, whereas Boston goes from zero to 90, a pretty high variation."
4106.12,18.0," The average for Boston and San Diego seems to be almost the same, right? But that variation is very different between these two cities. Okay. So, yeah, question."
4124.12,20.0," What happened if there's a value lower than the minimum one time? Oh, yeah, then it doesn't get plotted. Yeah, so that was a tenuous there, but it didn't go down. I could imagine the minimum in Boston being below zero for one year, but yeah, then it just wouldn't get plotted."
4144.12,19.0," So you could use that to guide your limits. Like the code here could say, while it equals minimum of those three lists, right? And then you'll be sure to make sure that minimum will be hidden in the limits. Great question."
4163.12,15.0," Okay, so one other thing that we can look at is the distribution of temperatures. Right, so this is a nice plot. It gives us sort of an overview look at what happens year by year. But what if we focus on one specific year?"
4178.12,25.0," And now for that year, let's think about what the temperature distribution looks like. Right, so what I'm interested in plotting is something like this. So I've got on the x axis, maybe bins that correspond to different temperatures. So a temperature of zero, temperature of one, temperature of two, three, four, and so on."
4203.12,18.0," And then this is going to be pretty big because maybe my max temperature will be 100. So for one particular year, I would like to have 100 bins. And the height of each bin is going to be a count of how many days within that year we reached a temperature of zero."
4221.12,10.0," How many days within the year we reached a temperature of one. And we can average things or we can round temperatures, right? Because obviously the temperature would be like 20.6 or something like that."
4231.12,14.0," Right, and then we can just round it so it fits in one of these bins. So that's exactly what this code is doing. So here it's looping over every single one of the dates."
4245.12,9.0, And we're creating this list of the temperatures. And the list is for one specific year. So this year is my parameter here.
4254.12,7.0, So here this is just going through the data and ensuring that I'm grabbing only the rows that match that year.
4261.12,12.0," And then down here is where I'm creating a list of 100 elements. Right, so this down here you can think of it as a list."
4274.12,10.0," I like this. And the index nicely, it worked out really nicely, the index is going to correspond to a temperature value."
4284.12,9.0, Which is weird to think it only works in this particular scenario with Fahrenheit temperatures. But the index in this list corresponds to a temperature.
4293.12,9.0," So as I'm iterating through my list of temperatures over 365 days in a year, I'm going to round that temperature."
4302.12,14.0," And I'm going to add it to the index that I believe it belongs to. Right, so in this way I'm going to have, you know, if the temperature was four degrees, then at index four, I'm going to increment my count by one."
4316.12,18.0," And if further on in the list, I've got another temperature that's four, and index four, I'm going to increment it again. So I've got this nice list, these nice counts of all of the temperatures at different, sorry, all of the counts at all of these different temperatures."
4334.12,11.0," So out of those 365 days, how many days had a temperature of four of 365 days, how many days had a temperature of 85?"
4345.12,11.0," Okay, and then we can plot it and we're not going to plot a regular plot because we don't want these connected. We're not going to do a histogram because we made our own histogram here."
4356.12,13.0," Instead, we're going to do a bar plot. And the bar plot takes in my x-axis and my y-axis, the x-axis being this list zero through 100, corresponding temperatures."
4369.12,9.0, And the y-axis being the count of how many days had each one of those temperatures. And we get something that looks like this.
4378.12,12.0," So this is only for one year, right? So if we count the sum of all of these bars, right, how many times they appear, it should add up to 365 days."
4390.12,10.0," So this is the distribution, I think, in 1961. Left is Boston and right is San Diego."
4400.12,8.0," Already, we can tell some pretty interesting things from this, right? So 1961, what does the distribution look like for these two cities?"
4408.12,9.0," Well, it looks like this is something we could already tell from the minimum and maximum. It looks like temperatures in Boston kind of went from about zero to 85."
4418.12,11.0, But what the distribution tells us that the minimum and maximum couldn't tell us is how many days were that low? Right? How many days were that high?
4429.12,12.0," Is it that we have some sort of nice looking bell curve type distribution, right? Where most of our temperatures land comfortably in this middle range? Right? That's one option."
4441.12,17.0," Or maybe there is some city out there where it just has an even distribution, right? So basically, they're going to have temperatures that, sorry, the count of the temperatures basically is even."
4458.12,7.0, So it doesn't really matter what temperature you're talking about. There will be an even number of days throughout the year that are at that temperature. Right?
4465.12,11.0, So this kind of graph can tell us this. So it looks like the temperature in Boston kind of maybe follows a very wide bell shaped curve kind of maybe two bumps by my model.
4476.12,17.0," Temperature in San Diego, again, much a much lower variability, but also seems to follow this bell type curve here where maybe by my model with two bumps here, one with temperatures that are just, you know, in the 55s."
4493.12,5.0," Very few temperatures in the middle and then you know, much of temperatures in the 70s."
4498.12,10.0, So this is the distribution for 1961. And then we can again ask what happens to the distribution in a later year.
4508.12,13.0," So if we take more than one year that we plot here, I'm going to plot 1961 and 2015. So just two years, not everything in between. That would be a very, very cluttered graph."
4521.12,9.0, I'm going to label the 1961 temperatures blue and the 2015 temperatures red.
4530.12,11.0, So then I get something that looks like this. A little hard to tell. So what we can do for this graph is we can actually add something called an alpha value. So a transparency.
4541.12,10.0, So we can kind of see what's behind the red. Does the blue go all the way down here? Is the blue just slightly below the red hard to tell from this.
4551.12,8.0," One thing we can do is to add that transparency, like I said, another thing that we can do is to just plot them on two separate subplots."
4559.12,11.0, And then we can try to compare them to see exactly what happened from 1961 in terms of the distribution to 2015 again in terms of the distribution.
4570.12,10.0," So you can, if you want play around with different cities, you know, your home city and see exactly what happened to the temperatures over all those years. So it's kind of a cute thing to try."
4580.12,4.0, Any questions?
4584.12,10.0," Okay. So that's the end. We've really just scratched the surface of the things that you can do with plotting today, right? We saw how to customize our graphs."
4594.12,10.0," We saw how to create labels, you know, some really, really basic things. But I hope that sort of throughout all this, you saw how useful it is to visualize the data."
4604.12,12.0," The commands are not so, you'll be working with in the real world if you do a Europe, if you decide to take, you know, the computer science courses in other departments, computation courses, you'll be working with data."
4616.12,6.0," And as soon as you get it, it's important to just visualize it to see what it looks like, sort of get a general sense of it."
4622.12,11.0," And once you get a sense of it, it can lead to more questions, which will cause you to kind of visualize the data in a slightly different way, which becomes more useful in answering questions and potentially posing the data."
4633.12,20.0," So that's it for today. Next lecture will be just tying up some loose ends regarding dictionaries and just some ideas and hash tables and how dictionaries are stored in memory as well as doing a little bit of preview of simulations, which is something that's a really useful technique."
4653.12,8.0," Again, if you're going to do some more computation courses in other departments, a simulation is something that's going to be really, really helpful."
